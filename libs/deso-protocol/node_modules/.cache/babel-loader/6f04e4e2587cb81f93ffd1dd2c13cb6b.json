{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.pad-start.js\";\nexport const uuid = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = Math.random() * 16 | 0,\n          v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n};\nexport const convertToHex = str => {\n  return str.split('').map(c => c.charCodeAt(0).toString(16).padStart(2, '0')).join('');\n};\nexport const convertExtraDataToHex = extraData => {\n  Object.keys(extraData.ExtraData).forEach(key => {\n    const dataToConvert = extraData.ExtraData[key];\n    extraData.ExtraData[key] = convertToHex(dataToConvert);\n  });\n  return extraData;\n};\nexport const throwErrors = (requiredAttributes, request) => {\n  requiredAttributes.forEach(attrName => {\n    const doesExist = request[attrName];\n\n    if (!doesExist) {\n      throw Error(`${attrName} is required`);\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/tyler/Documents/DeSo/deso-workspace/libs/deso-protocol/src/utils/utils.ts"],"names":["uuid","replace","c","r","Math","random","v","toString","convertToHex","str","split","map","charCodeAt","padStart","join","convertExtraDataToHex","extraData","Object","keys","ExtraData","forEach","key","dataToConvert","throwErrors","requiredAttributes","request","attrName","doesExist","Error"],"mappings":";;;;;AACA,OAAO,MAAMA,IAAI,GAAG,MAAM;AACxB,SAAO,uCAAuCC,OAAvC,CAA+C,OAA/C,EAAwD,UAAUC,CAAV,EAAa;AAC1E,UAAMC,CAAC,GAAIC,IAAI,CAACC,MAAL,KAAgB,EAAjB,GAAuB,CAAjC;AAAA,UACEC,CAAC,GAAGJ,CAAC,KAAK,GAAN,GAAYC,CAAZ,GAAiBA,CAAC,GAAG,GAAL,GAAY,GADlC;AAEA,WAAOG,CAAC,CAACC,QAAF,CAAW,EAAX,CAAP;AACD,GAJM,CAAP;AAKD,CANM;AAQP,OAAO,MAAMC,YAAY,GAAIC,GAAD,IAAyB;AACnD,SAAOA,GAAG,CACPC,KADI,CACE,EADF,EAEJC,GAFI,CAECT,CAAD,IAAOA,CAAC,CAACU,UAAF,CAAa,CAAb,EAAgBL,QAAhB,CAAyB,EAAzB,EAA6BM,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAFP,EAGJC,IAHI,CAGC,EAHD,CAAP;AAID,CALM;AAOP,OAAO,MAAMC,qBAAqB,GAChCC,SADmC,IAEhC;AACHC,EAAAA,MAAM,CAACC,IAAP,CAAYF,SAAS,CAACG,SAAtB,EAAiCC,OAAjC,CAA0CC,GAAD,IAAS;AAChD,UAAMC,aAAa,GAAGN,SAAS,CAACG,SAAV,CAAoBE,GAApB,CAAtB;AACAL,IAAAA,SAAS,CAACG,SAAV,CAAoBE,GAApB,IAA2Bb,YAAY,CAACc,aAAD,CAAvC;AACD,GAHD;AAIA,SAAON,SAAP;AACD,CARM;AAUP,OAAO,MAAMO,WAAW,GAAG,CACzBC,kBADyB,EAEzBC,OAFyB,KAGhB;AACTD,EAAAA,kBAAkB,CAACJ,OAAnB,CAA4BM,QAAD,IAAsB;AAC/C,UAAMC,SAAS,GAAIF,OAAD,CAAiBC,QAAjB,CAAlB;;AACA,QAAI,CAACC,SAAL,EAAgB;AACd,YAAMC,KAAK,CAAE,GAAEF,QAAS,cAAb,CAAX;AACD;AACF,GALD;AAMD,CAVM","sourcesContent":["import { AppendExtraDataRequest } from 'deso-protocol-types';\nexport const uuid = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n\nexport const convertToHex = (str: string): string => {\n  return str\n    .split('')\n    .map((c) => c.charCodeAt(0).toString(16).padStart(2, '0'))\n    .join('');\n};\n\nexport const convertExtraDataToHex = (\n  extraData: Omit<AppendExtraDataRequest, 'TransactionHex'>\n) => {\n  Object.keys(extraData.ExtraData).forEach((key) => {\n    const dataToConvert = extraData.ExtraData[key];\n    extraData.ExtraData[key] = convertToHex(dataToConvert);\n  });\n  return extraData;\n};\n\nexport const throwErrors = (\n  requiredAttributes: string[],\n  request: Partial<any>\n): void => {\n  requiredAttributes.forEach((attrName: string) => {\n    const doesExist = (request as any)[attrName];\n    if (!doesExist) {\n      throw Error(`${attrName} is required`);\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}