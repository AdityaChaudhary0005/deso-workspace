{"ast":null,"code":"import \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.object.assign.js\";\n\n/* eslint-disable @typescript-eslint/ban-types */\nimport { Transactions } from '../transaction/Transaction';\nexport const iFrameHandler = info => {\n  return new Promise((resolve, reject) => {\n    const windowHandler = event => {\n      handlers(event, windowHandler, Object.assign({}, info, {\n        data: Object.assign({}, info.data, {\n          resolve,\n          reject\n        })\n      }));\n    };\n\n    window.addEventListener('message', windowHandler);\n  });\n};\nexport const handlers = async (event, windowHandler, info) => {\n  if (info.iFrameMethod === 'sign') {\n    var _event$data, _event$data$payload;\n\n    if (event != null && (_event$data = event.data) != null && (_event$data$payload = _event$data.payload) != null && _event$data$payload.signedTransactionHex) {\n      var _event$data2, _event$data2$payload;\n\n      return Transactions.submitTransaction(event == null ? void 0 : (_event$data2 = event.data) == null ? void 0 : (_event$data2$payload = _event$data2.payload) == null ? void 0 : _event$data2$payload.signedTransactionHex).then(res => {\n        var _info$data, _info$data$prompt;\n\n        if (info != null && (_info$data = info.data) != null && (_info$data$prompt = _info$data.prompt) != null && _info$data$prompt.close) {\n          info.data.prompt.close();\n        }\n\n        window.removeEventListener('message', windowHandler);\n        info.data.resolve(res);\n        return res;\n      }).catch(() => {\n        window.removeEventListener('message', windowHandler);\n      });\n    }\n  }\n\n  if (info.iFrameMethod === 'decrypt') {\n    var _event$data3, _event$data3$payload, _event$data4, _event$data4$payload;\n\n    if (!(event != null && (_event$data3 = event.data) != null && (_event$data3$payload = _event$data3.payload) != null && _event$data3$payload.decryptedHexes)) {\n      return;\n    }\n\n    const decryptedHexes = event == null ? void 0 : (_event$data4 = event.data) == null ? void 0 : (_event$data4$payload = _event$data4.payload) == null ? void 0 : _event$data4$payload.decryptedHexes;\n    const messages = info.data.encryptedMessages;\n    const thread = messages == null ? void 0 : messages.map(m => {\n      const DecryptedMessage = decryptedHexes[m.EncryptedHex];\n      return Object.assign({}, m, {\n        DecryptedMessage\n      });\n    });\n    info.data.resolve(thread);\n    window.removeEventListener('message', windowHandler);\n  }\n\n  if (info.iFrameMethod === 'login' && event.data.method === 'login') {\n    var _event$data5, _event$data5$payload, _info$data$prompt2;\n\n    const key = event == null ? void 0 : (_event$data5 = event.data) == null ? void 0 : (_event$data5$payload = _event$data5.payload) == null ? void 0 : _event$data5$payload.publicKeyAdded;\n    const user = JSON.stringify(event.data.payload.users[key]);\n    (_info$data$prompt2 = info.data.prompt) == null ? void 0 : _info$data$prompt2.close();\n    info.data.resolve({\n      key,\n      user\n    });\n    window.removeEventListener('message', windowHandler);\n  }\n\n  if (info.iFrameMethod === 'logout' && event.data.method === 'login') {\n    var _info$data$prompt3;\n\n    (_info$data$prompt3 = info.data.prompt) == null ? void 0 : _info$data$prompt3.close();\n    info.data.resolve(true);\n    localStorage.setItem('login_user', '');\n    localStorage.setItem('login_key', '');\n  }\n\n  if (info.iFrameMethod === 'jwt') {\n    if (event.data.payload.jwt) {\n      var _info$data$prompt4;\n\n      (_info$data$prompt4 = info.data.prompt) == null ? void 0 : _info$data$prompt4.close();\n      info.data.resolve(event.data.payload.jwt);\n      window.removeEventListener('message', windowHandler);\n    }\n  }\n\n  if (info.iFrameMethod === 'encrypt') {\n    if (event.data.payload.encryptedMessage) {\n      console.log(event.data);\n      info.data.resolve(event.data.payload.encryptedMessage);\n      window.removeEventListener('message', windowHandler);\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/tyler/Documents/DeSo/deso-workspace/libs/deso-protocol/src/lib/identity/WindowHandler.ts"],"names":["Transactions","iFrameHandler","info","Promise","resolve","reject","windowHandler","event","handlers","data","window","addEventListener","iFrameMethod","payload","signedTransactionHex","submitTransaction","then","res","prompt","close","removeEventListener","catch","decryptedHexes","messages","encryptedMessages","thread","map","m","DecryptedMessage","EncryptedHex","method","key","publicKeyAdded","user","JSON","stringify","users","localStorage","setItem","jwt","encryptedMessage","console","log"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport { Transactions } from '../transaction/Transaction';\nimport { IframeMethods } from './IdentityHelper';\nimport { GetDecryptMessagesResponse } from 'deso-protocol-types';\n\nexport const iFrameHandler = (info: Payload): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    const windowHandler = (event: any) => {\n      handlers(event, windowHandler, {\n        ...info,\n        data: { ...info.data, resolve, reject },\n      });\n    };\n    window.addEventListener('message', windowHandler);\n  });\n};\n\ntype Payload = { iFrameMethod: IframeMethods; data?: any };\n\nexport const handlers = async (\n  event: any,\n  windowHandler: any,\n  info: Payload\n): Promise<any> => {\n  if (info.iFrameMethod === 'sign') {\n    if (event?.data?.payload?.signedTransactionHex) {\n      return Transactions.submitTransaction(\n        event?.data?.payload?.signedTransactionHex\n      )\n        .then((res) => {\n          if (info?.data?.prompt?.close) {\n            info.data.prompt.close();\n          }\n          window.removeEventListener('message', windowHandler);\n          info.data.resolve(res);\n          return res;\n        })\n        .catch(() => {\n          window.removeEventListener('message', windowHandler);\n        });\n    }\n  }\n  if (info.iFrameMethod === 'decrypt') {\n    if (!event?.data?.payload?.decryptedHexes) {\n      return;\n    }\n    const decryptedHexes = event?.data?.payload?.decryptedHexes;\n    const messages = info.data.encryptedMessages;\n    const thread = (messages as GetDecryptMessagesResponse[])?.map((m) => {\n      const DecryptedMessage = decryptedHexes[m.EncryptedHex];\n      return { ...m, DecryptedMessage };\n    });\n    info.data.resolve(thread);\n\n    window.removeEventListener('message', windowHandler);\n  }\n\n  if (info.iFrameMethod === 'login' && event.data.method === 'login') {\n    const key = event?.data?.payload?.publicKeyAdded;\n    const user = JSON.stringify(event.data.payload.users[key]);\n    info.data.prompt?.close();\n    info.data.resolve({ key, user });\n    window.removeEventListener('message', windowHandler);\n  }\n\n  if (info.iFrameMethod === 'logout' && event.data.method === 'login') {\n    info.data.prompt?.close();\n    info.data.resolve(true);\n    localStorage.setItem('login_user', '');\n    localStorage.setItem('login_key', '');\n  }\n\n  if (info.iFrameMethod === 'jwt') {\n    if (event.data.payload.jwt) {\n      info.data.prompt?.close();\n      info.data.resolve(event.data.payload.jwt);\n      window.removeEventListener('message', windowHandler);\n    }\n  }\n\n  if (info.iFrameMethod === 'encrypt') {\n    if (event.data.payload.encryptedMessage) {\n      console.log(event.data);\n      info.data.resolve(event.data.payload.encryptedMessage);\n      window.removeEventListener('message', windowHandler);\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}