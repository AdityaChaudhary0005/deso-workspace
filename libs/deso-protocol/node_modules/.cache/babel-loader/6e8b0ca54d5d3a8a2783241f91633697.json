{"ast":null,"code":"import \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.array.flat.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport axios from 'axios';\nexport class Social {\n  constructor(node, identity, user) {\n    this.node = void 0;\n    this.identity = void 0;\n    this.user = void 0;\n    this.user = user;\n    this.node = node;\n    this.identity = identity;\n  }\n\n  async sendMessage(request) {\n    const encryptedMessage = await this.identity.encrypt(request);\n    request.EncryptedMessageText = encryptedMessage;\n\n    if (!request.MinFeeRateNanosPerKB) {\n      request.MinFeeRateNanosPerKB = 1000;\n    }\n\n    const response = (await axios.post(`${this.node.getUri()}/send-message-stateless`, request)).data;\n    return await this.identity.submitTransaction(response.TransactionHex);\n  }\n\n  async createFollowTxnStateless(request) {\n    if (!request.FollowerPublicKeyBase58Check) {\n      throw Error('FollowerPublicKeyBase58Check is undefined');\n    }\n\n    if (!request.FollowedPublicKeyBase58Check) {\n      throw Error('FollowedPublicKeyBase58Check is undefined');\n    }\n\n    if (request.IsUnfollow instanceof Boolean) {\n      throw Error('IsUnfollow is undefined');\n    }\n\n    request = Object.assign({}, {\n      MinFeeRateNanosPerKB: 1000\n    }, request);\n    const response = (await axios.post(`${this.node.getUri()}/create-follow-txn-stateless`, request)).data;\n    return await this.identity.submitTransaction(response.TransactionHex);\n  }\n\n  async getFollowsStateless(request) {\n    const endpoint = 'get-follows-stateless';\n    const response = (await axios.post(`${this.node.getUri()}/${endpoint}`, request)).data;\n    return response;\n  }\n\n  async getMessagesStateless(request) {\n    const response = (await axios.post(`${this.node.getUri()}/get-messages-stateless`, request)).data;\n    const encryptedMessages = response.OrderedContactsWithMessages.map(thread => {\n      if (thread.Messages === null) {\n        return [];\n      }\n\n      return thread.Messages.map(message => ({\n        EncryptedHex: message.EncryptedText,\n        PublicKey: message.IsSender ? message.RecipientPublicKeyBase58Check : message.SenderPublicKeyBase58Check,\n        IsSender: message.IsSender,\n        Legacy: !message.V2 && (!message.Version || message.Version < 2),\n        Version: message.Version,\n        SenderMessagingPublicKey: message.SenderMessagingPublicKey,\n        SenderMessagingGroupKeyName: message.SenderMessagingGroupKeyName,\n        RecipientMessagingPublicKey: message.RecipientMessagingPublicKey,\n        RecipientMessagingGroupKeyName: message.RecipientMessagingGroupKeyName\n      }));\n    }).flat();\n    return this.identity.decrypt(encryptedMessages);\n  }\n\n  async getHodlersForPublicKey(request) {\n    const endpoint = 'get-hodlers-for-public-key';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async getDiamondsForPublicKey(request) {\n    const endpoint = 'get-diamonds-for-public-key';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async isFollowingPublicKey(request) {\n    const endpoint = 'is-following-public-key';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async isHodlingPublicKey(request) {\n    const endpoint = 'is-hodling-public-key';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async updateProfile(request) {\n    throw Error('todo');\n    const endpoint = 'update-profile';\n    const response = (await axios.post(`${this.node.getUri()}/${endpoint}`, request)).data; // const profile = (await this.user.getSingleProfile({\n    //   PublicKeyBase58Check: request.ProfilePublicKeyBase58Check,\n    // })).Profile;\n    //   const oy = {\n    // NewUsername: profile?.Username,\n    // NewDescription: profile?.Description,\n    // // NewProfilePic: profile.,\n    // NewCreatorBasisPoints: profile.,\n    // MinFeeRateNanosPerKB: 1000\n    //   }\n\n    response.TransactionHex;\n    return await this.identity.submitTransaction(response.TransactionHex).then(() => response).catch(() => {\n      throw Error('something went wrong while signing');\n    });\n  }\n\n  async sendDiamonds(request) {\n    const endpoint = 'send-diamonds';\n    const response = (await axios.post(`${this.node.getUri()}/${endpoint}`, request)).data;\n    return await this.identity.submitTransaction(response.TransactionHex).then(() => response).catch(() => {\n      throw Error('something went wrong while signing');\n    });\n  }\n\n  async createLikeStateless(request) {\n    const endpoint = 'create-like-stateless';\n    const response = await (await axios.post(`${this.node.getUri()}/${endpoint}`, request)).data;\n    return await this.identity.submitTransaction(response.TransactionHex).then(() => response).catch(() => {\n      throw Error('something went wrong while signing');\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/tyler/Documents/DeSo/deso-workspace/libs/deso-protocol/src/lib/social/Social.ts"],"names":["axios","Social","constructor","node","identity","user","sendMessage","request","encryptedMessage","encrypt","EncryptedMessageText","MinFeeRateNanosPerKB","response","post","getUri","data","submitTransaction","TransactionHex","createFollowTxnStateless","FollowerPublicKeyBase58Check","Error","FollowedPublicKeyBase58Check","IsUnfollow","Boolean","getFollowsStateless","endpoint","getMessagesStateless","encryptedMessages","OrderedContactsWithMessages","map","thread","Messages","message","EncryptedHex","EncryptedText","PublicKey","IsSender","RecipientPublicKeyBase58Check","SenderPublicKeyBase58Check","Legacy","V2","Version","SenderMessagingPublicKey","SenderMessagingGroupKeyName","RecipientMessagingPublicKey","RecipientMessagingGroupKeyName","flat","decrypt","getHodlersForPublicKey","getDiamondsForPublicKey","isFollowingPublicKey","isHodlingPublicKey","updateProfile","then","catch","sendDiamonds","createLikeStateless"],"mappings":"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","sourcesContent":["import {\n  CreateFollowTxnStatelessRequest,\n  CreateFollowTxnStatelessResponse,\n  CreateLikeStatelessRequest,\n  CreateLikeStatelessResponse,\n  GetDecryptMessagesResponse,\n  GetDiamondsForPublicKeyRequest,\n  GetDiamondsForPublicKeyResponse,\n  GetFollowsResponse,\n  GetFollowsStatelessRequest,\n  GetHodlersForPublicKeyRequest,\n  GetHodlersForPublicKeyResponse,\n  GetMessagesResponse,\n  GetMessagesStatelessRequest,\n  IsFolllowingPublicKeyResponse,\n  IsFollowingPublicKeyRequest,\n  IsHodlingPublicKeyRequest,\n  IsHodlingPublicKeyResponse,\n  MessageContactResponse,\n  SendDiamondsRequest,\n  SendDiamondsResponse,\n  SendMessageStatelessRequest,\n  UpdateProfileRequest,\n  UpdateProfileResponse,\n} from 'deso-protocol-types';\nimport axios from 'axios';\nimport { Identity } from '../identity/Identity';\nimport { Node } from '../node/Node';\nimport { User } from '../user/User';\n\nexport class Social {\n  node: Node;\n  identity: Identity;\n  user: User;\n\n  constructor(node: Node, identity: Identity, user: User) {\n    this.user = user;\n    this.node = node;\n    this.identity = identity;\n  }\n\n  public async sendMessage(request: Partial<SendMessageStatelessRequest>) {\n    const encryptedMessage = await this.identity.encrypt(request);\n    request.EncryptedMessageText = encryptedMessage;\n    if (!request.MinFeeRateNanosPerKB) {\n      request.MinFeeRateNanosPerKB = 1000;\n    }\n    const response = (\n      await axios.post(`${this.node.getUri()}/send-message-stateless`, request)\n    ).data;\n    return await this.identity.submitTransaction(response.TransactionHex);\n  }\n\n  public async createFollowTxnStateless(\n    request: CreateFollowTxnStatelessRequest\n  ): Promise<CreateFollowTxnStatelessResponse> {\n    if (!request.FollowerPublicKeyBase58Check) {\n      throw Error('FollowerPublicKeyBase58Check is undefined');\n    }\n    if (!request.FollowedPublicKeyBase58Check) {\n      throw Error('FollowedPublicKeyBase58Check is undefined');\n    }\n    if ((request.IsUnfollow as any) instanceof Boolean) {\n      throw Error('IsUnfollow is undefined');\n    }\n    request = { ...{ MinFeeRateNanosPerKB: 1000 }, ...request };\n    const response = (\n      await axios.post<CreateFollowTxnStatelessResponse>(\n        `${this.node.getUri()}/create-follow-txn-stateless`,\n        request\n      )\n    ).data;\n    return await this.identity.submitTransaction(response.TransactionHex);\n  }\n\n  public async getFollowsStateless(\n    request: Partial<GetFollowsStatelessRequest>\n  ): Promise<GetFollowsResponse> {\n    const endpoint = 'get-follows-stateless';\n    const response: GetFollowsResponse = (\n      await axios.post(`${this.node.getUri()}/${endpoint}`, request)\n    ).data;\n    return response;\n  }\n\n  public async getMessagesStateless(\n    request: GetMessagesStatelessRequest\n  ): Promise<GetDecryptMessagesResponse[]> {\n    const response: GetMessagesResponse = (\n      await axios.post(`${this.node.getUri()}/get-messages-stateless`, request)\n    ).data;\n    const encryptedMessages = (\n      response.OrderedContactsWithMessages as MessageContactResponse[]\n    )\n      .map((thread) => {\n        if (thread.Messages === null) {\n          return [];\n        }\n        return thread.Messages.map((message) => ({\n          EncryptedHex: message.EncryptedText,\n          PublicKey: message.IsSender\n            ? message.RecipientPublicKeyBase58Check\n            : message.SenderPublicKeyBase58Check,\n          IsSender: message.IsSender,\n          Legacy: !message.V2 && (!message.Version || message.Version < 2),\n          Version: message.Version,\n          SenderMessagingPublicKey: message.SenderMessagingPublicKey,\n          SenderMessagingGroupKeyName: message.SenderMessagingGroupKeyName,\n          RecipientMessagingPublicKey: message.RecipientMessagingPublicKey,\n          RecipientMessagingGroupKeyName:\n            message.RecipientMessagingGroupKeyName,\n        }));\n      })\n      .flat();\n    return this.identity.decrypt(encryptedMessages);\n  }\n\n  public async getHodlersForPublicKey(\n    request: Partial<GetHodlersForPublicKeyRequest>\n  ): Promise<GetHodlersForPublicKeyResponse> {\n    const endpoint = 'get-hodlers-for-public-key';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  public async getDiamondsForPublicKey(\n    request: Partial<GetDiamondsForPublicKeyRequest>\n  ): Promise<GetDiamondsForPublicKeyResponse> {\n    const endpoint = 'get-diamonds-for-public-key';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  public async isFollowingPublicKey(\n    request: Partial<IsFollowingPublicKeyRequest>\n  ): Promise<IsFolllowingPublicKeyResponse> {\n    const endpoint = 'is-following-public-key';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  public async isHodlingPublicKey(\n    request: Partial<IsHodlingPublicKeyRequest>\n  ): Promise<IsHodlingPublicKeyResponse> {\n    const endpoint = 'is-hodling-public-key';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  public async updateProfile(\n    request: Partial<UpdateProfileRequest>\n  ): Promise<UpdateProfileResponse> {\n    throw Error('todo');\n    const endpoint = 'update-profile';\n    const response: UpdateProfileResponse = (\n      await axios.post(`${this.node.getUri()}/${endpoint}`, request)\n    ).data;\n    // const profile = (await this.user.getSingleProfile({\n    //   PublicKeyBase58Check: request.ProfilePublicKeyBase58Check,\n    // })).Profile;\n    //   const oy = {\n    // NewUsername: profile?.Username,\n    // NewDescription: profile?.Description,\n    // // NewProfilePic: profile.,\n    // NewCreatorBasisPoints: profile.,\n    // MinFeeRateNanosPerKB: 1000\n    //   }\n    response.TransactionHex;\n    return await this.identity\n      .submitTransaction(response.TransactionHex)\n      .then(() => response)\n      .catch(() => {\n        throw Error('something went wrong while signing');\n      });\n  }\n\n  public async sendDiamonds(\n    request: Partial<SendDiamondsRequest>\n  ): Promise<SendDiamondsResponse> {\n    const endpoint = 'send-diamonds';\n    const response = (\n      await axios.post(`${this.node.getUri()}/${endpoint}`, request)\n    ).data;\n    return await this.identity\n      .submitTransaction(response.TransactionHex)\n      .then(() => response)\n      .catch(() => {\n        throw Error('something went wrong while signing');\n      });\n  }\n\n  public async createLikeStateless(\n    request: Partial<CreateLikeStatelessRequest>\n  ): Promise<CreateLikeStatelessResponse> {\n    const endpoint = 'create-like-stateless';\n    const response = await (\n      await axios.post(`${this.node.getUri()}/${endpoint}`, request)\n    ).data;\n    return await this.identity\n      .submitTransaction(response.TransactionHex)\n      .then(() => response)\n      .catch(() => {\n        throw Error('something went wrong while signing');\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}