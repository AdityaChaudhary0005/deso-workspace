{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tyler\\\\Documents\\\\DeSo\\\\deso-workspace\\\\apps\\\\developer-hub\\\\src\\\\chapters\\\\ChapterHelper\\\\nftChapter.tsx\";\nimport { Route } from 'react-router-dom';\nimport { CHAPTERS } from './Chapter.models';\nimport Deso from 'deso-protocol';\nimport { ParentRoutes, TYLER, DEZO_DOG, SAMPLE_POST, SAMPLE_NFT_POST } from '../../services/utils';\nimport Page from '../Read/Page';\nimport { PageSection } from './PageSections';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst deso = new Deso();\nexport const nftChapter = {\n  GET_NFTS_FOR_USER: {\n    parentRoute: ParentRoutes.nft,\n    title: 'Get Nfts For User',\n    route: '/nft/get-nfts-for-user',\n    method: deso.nft.getNftsForUser,\n    params: () => {\n      return {\n        UserPublicKeyBase58Check: localStorage.getItem('login_key') || DEZO_DOG\n      };\n    },\n    githubSource: [],\n    documentation: ['https://docs.deso.org/for-developers/backend/blockchain-data/api/nft-endpoints#get-nfts-for-user'],\n    component: function () {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: this.route,\n        element: /*#__PURE__*/_jsxDEV(Page, {\n          demo: true,\n          method: {\n            methodName: 'deso.nft.getNftsForUser(request)',\n            params: this.params,\n            method: this.method\n          },\n          pretext: PageSection(this.title, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Get the nfts that belongs to an account.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, this)),\n          chapters: CHAPTERS,\n          selectedChapter: this\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }, this.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this);\n    }\n  },\n  GET_NFT_BIDS_FOR_USER: {\n    parentRoute: ParentRoutes.nft,\n    title: 'Get Nft Bids For User',\n    route: '/nft/get-nft-bids-for-user',\n    method: deso.nft.getNftBidsForUser,\n    params: () => {\n      return {\n        UserPublicKeyBase58Check: DEZO_DOG\n      };\n    },\n    githubSource: [],\n    documentation: ['https://docs.deso.org/for-developers/backend/blockchain-data/api/nft-endpoints#get-nft-bids-for-user'],\n    component: function () {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: this.route,\n        element: /*#__PURE__*/_jsxDEV(Page, {\n          demo: true,\n          method: {\n            methodName: 'deso.nft.getNftBidsForUser(request)',\n            params: this.params,\n            method: this.method\n          },\n          pretext: PageSection(this.title, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Get active bids for a user.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this)),\n          chapters: CHAPTERS,\n          selectedChapter: this\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)\n      }, this.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this);\n    }\n  },\n  GET_NFT_BIDS_FOR_NFT_POST: {\n    parentRoute: ParentRoutes.nft,\n    title: 'Get Nft Bids For Nft Post',\n    route: '/nft/get-nft-bids-for-nft-post',\n    githubSource: [],\n    method: deso.nft.getNftBidsForNftPost,\n    params: () => {\n      return {\n        PostHashHex: SAMPLE_POST\n      };\n    },\n    documentation: ['https://docs.deso.org/for-developers/backend/blockchain-data/api/nft-endpoints#get-nft-bids-for-nft-post'],\n    component: function () {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: this.route,\n        element: /*#__PURE__*/_jsxDEV(Page, {\n          demo: true,\n          method: {\n            methodName: 'deso.nft.getNftBidsForNftPost(request)',\n            params: this.params,\n            method: this.method\n          },\n          pretext: PageSection(this.title, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Get all bids for all serial numbers of a given post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 17\n          }, this)),\n          chapters: CHAPTERS,\n          selectedChapter: this\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)\n      }, this.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this);\n    }\n  },\n  GET_NFT_SHOWCASE: {\n    parentRoute: ParentRoutes.nft,\n    title: 'Get Nft Showcase',\n    route: '/nft/get-nft-showcase',\n    githubSource: [],\n    documentation: ['https://docs.deso.org/for-developers/backend/blockchain-data/api/nft-endpoints#get-nft-showcase'],\n    method: deso.nft.getNftShowcase,\n    params: () => {\n      return {\n        ReaderPublicKeyBase58Check: DEZO_DOG\n      };\n    },\n    component: function () {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: this.route,\n        element: /*#__PURE__*/_jsxDEV(Page, {\n          demo: true,\n          method: {\n            methodName: 'deso.nft.getNftShowcase(request)',\n            params: this.params,\n            method: this.method\n          },\n          pretext: PageSection(this.title, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Get summaries of all NFTs included in the NFT showcase.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 17\n          }, this)),\n          chapters: CHAPTERS,\n          selectedChapter: this\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this)\n      }, this.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this);\n    }\n  },\n  GET_NEXT_NFT_SHOWCASE: {\n    parentRoute: ParentRoutes.nft,\n    title: 'Get Next Nft Showcase',\n    route: '/nft/get-next-nft-showcase',\n    githubSource: [],\n    documentation: ['https://docs.deso.org/for-developers/backend/blockchain-data/api/nft-endpoints#get-next-nft-showcase'],\n    method: deso.nft.getNextNftShowCase,\n    params: () => {\n      return {\n        ReaderPublicKeyBase58Check: TYLER\n      };\n    },\n    component: function () {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: this.route,\n        element: /*#__PURE__*/_jsxDEV(Page, {\n          demo: true,\n          method: {\n            methodName: 'deso.nft.getNextNftShowCase(request)',\n            params: this.params,\n            method: this.method\n          },\n          pretext: PageSection(this.title, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Get the time of the next NFT showcase drop.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this)),\n          chapters: CHAPTERS,\n          selectedChapter: this\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this)\n      }, this.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this);\n    }\n  },\n  GET_NFT_COLLECTION_SUMMARY: {\n    parentRoute: ParentRoutes.nft,\n    title: 'Get Nft Collection Summary',\n    route: '/nft/get-nft-collection-summary',\n    githubSource: [],\n    documentation: ['https://docs.deso.org/for-developers/backend/blockchain-data/api/nft-endpoints#get-nft-collection-summary'],\n    method: deso.nft.getNftCollectionSummary,\n    params: () => {\n      return {\n        PostHashHex: SAMPLE_POST\n      };\n    },\n    component: function () {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: this.route,\n        element: /*#__PURE__*/_jsxDEV(Page, {\n          demo: true,\n          method: {\n            methodName: 'deso.nft.getNftCollectionSummary(request)',\n            params: this.params,\n            method: this.method\n          },\n          pretext: PageSection(this.title, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Get information on a NFT collection.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 17\n          }, this)),\n          chapters: CHAPTERS,\n          selectedChapter: this\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this)\n      }, this.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this);\n    }\n  },\n  GET_NFT_ENTRIES_FOR_POST_HASH: {\n    parentRoute: ParentRoutes.nft,\n    title: 'Get Nft Entries For Post Hash',\n    route: '/nft/get-nft-entries-for-post-hash',\n    githubSource: [],\n    documentation: ['https://docs.deso.org/for-developers/backend/blockchain-data/api/nft-endpoints#get-nft-entries-for-post-hash'],\n    method: deso.nft.getNftEntriesForPostHash,\n    params: () => {\n      return {\n        PostHashHex: SAMPLE_POST\n      };\n    },\n    component: function () {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: this.route,\n        element: /*#__PURE__*/_jsxDEV(Page, {\n          demo: true,\n          method: {\n            methodName: 'deso.nft.getNftEntriesForPostHash(request)',\n            params: this.params,\n            method: this.method\n          },\n          pretext: PageSection(this.title, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Get an NFT entry response for each serial number of this NFT post.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 17\n          }, this)),\n          chapters: CHAPTERS,\n          selectedChapter: this\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this)\n      }, this.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this);\n    }\n  },\n  CREATE_NFT: {\n    parentRoute: ParentRoutes.nft,\n    title: 'Create Nft',\n    route: '/nft/create-nft',\n    githubSource: [],\n    documentation: ['https://docs.deso.org/for-developers/backend/transactions/construct-transactions/nft-transactions-api#create-nft'],\n    method: deso.nft.createNft,\n    params: () => {\n      return {\n        UpdaterPublicKeyBase58Check: localStorage.getItem('login_key'),\n        NFTPostHashHex: SAMPLE_NFT_POST,\n        NumCopies: 1,\n        NFTRoyaltyToCreatorBasisPoints: 100,\n        NFTRoyaltyToCoinBasisPoints: 100,\n        HasUnlockable: false,\n        IsForSale: false,\n        MinFeeRateNanosPerKB: 1000\n      };\n    },\n    component: function () {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: this.route,\n        element: /*#__PURE__*/_jsxDEV(Page, {\n          demo: false,\n          method: {\n            methodName: 'deso.nft.createNft(request)',\n            params: this.params,\n            method: this.method\n          },\n          pretext: PageSection(this.title, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Create an NFT.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 48\n          }, this)),\n          chapters: CHAPTERS,\n          selectedChapter: this\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 13\n        }, this)\n      }, this.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this);\n    }\n  },\n  UPDATE_NFT: {\n    parentRoute: ParentRoutes.nft,\n    title: 'Update Nft',\n    route: '/nft/update-nft',\n    githubSource: [],\n    documentation: ['https://docs.deso.org/for-developers/backend/transactions/construct-transactions/nft-transactions-api#update-nft'],\n    method: deso.nft.updateNft,\n    params: () => {\n      return {\n        UpdaterPublicKeyBase58Check: localStorage.getItem('login_key'),\n        NFTPostHashHex: SAMPLE_NFT_POST,\n        SerialNumber: 1,\n        IsForSale: true,\n        MinBidAmountNanos: 100,\n        MinFeeRateNanosPerKB: 1000\n      };\n    },\n    component: function () {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: this.route,\n        element: /*#__PURE__*/_jsxDEV(Page, {\n          demo: false,\n          method: {\n            methodName: 'deso.nft.updateNft(request)',\n            params: this.params,\n            method: this.method\n          },\n          pretext: PageSection(this.title, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Update an NFT.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 48\n          }, this)),\n          chapters: CHAPTERS,\n          selectedChapter: this\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 13\n        }, this)\n      }, this.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this);\n    }\n  },\n  CREATE_NFT_BID: {\n    parentRoute: ParentRoutes.nft,\n    title: 'Create Nft Bid',\n    route: '/nft/create-nft-bid',\n    githubSource: [],\n    documentation: ['https://docs.deso.org/for-developers/backend/transactions/construct-transactions/nft-transactions-api#create-nft-bid'],\n    method: deso.nft.createNftBid,\n    params: () => {\n      return {\n        UpdaterPublicKeyBase58Check: localStorage.getItem('login_key'),\n        NFTPostHashHex: SAMPLE_NFT_POST,\n        SerialNumber: 1,\n        BidAmountNanos: 100,\n        MinFeeRateNanosPerKB: 1000\n      };\n    },\n    component: function () {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: this.route,\n        element: /*#__PURE__*/_jsxDEV(Page, {\n          demo: false,\n          method: {\n            methodName: 'deso.nft.createNftBid(request)',\n            params: this.params,\n            method: this.method\n          },\n          pretext: PageSection(this.title, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Make a bid on an existing NFT.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 17\n          }, this)),\n          chapters: CHAPTERS,\n          selectedChapter: this\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this)\n      }, this.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this);\n    }\n  },\n  ACCEPT_NFT_BID: {\n    parentRoute: ParentRoutes.nft,\n    title: 'Accept Nft Bid',\n    route: '/nft/accept-nft-bid',\n    githubSource: [],\n    documentation: ['https://docs.deso.org/for-developers/backend/transactions/construct-transactions/nft-transactions-api#accept-nft-bid'],\n    method: deso.nft.acceptNftBid,\n    params: () => {\n      return {\n        UpdaterPublicKeyBase58Check: localStorage.getItem('login_key'),\n        BidderPublicKeyBase58Check: DEZO_DOG,\n        NFTPostHashHex: SAMPLE_NFT_POST,\n        SerialNumber: 1,\n        BidAmountNanos: 100,\n        MinFeeRateNanosPerKB: 1000\n      };\n    },\n    component: function () {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: this.route,\n        element: /*#__PURE__*/_jsxDEV(Page, {\n          demo: false,\n          method: {\n            methodName: 'deso.nft.acceptNftBid(request)',\n            params: this.params,\n            method: this.method\n          },\n          pretext: PageSection(this.title, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Accept an NFT bid.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 48\n          }, this)),\n          chapters: CHAPTERS,\n          selectedChapter: this\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 13\n        }, this)\n      }, this.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this);\n    }\n  },\n  TRANSFER_NFT: {\n    parentRoute: ParentRoutes.nft,\n    title: 'Transfer Nft',\n    route: '/nft/transfer-nft',\n    githubSource: [],\n    documentation: ['https://docs.deso.org/for-developers/backend/transactions/construct-transactions/nft-transactions-api#transfer-nft'],\n    method: deso.nft.transferNft,\n    params: () => {\n      return {\n        SenderPublicKeyBase58Check: localStorage.getItem('login_key'),\n        ReceiverPublicKeyBase58Check: TYLER,\n        NFTPostHashHex: SAMPLE_NFT_POST,\n        SerialNumber: 1,\n        MinFeeRateNanosPerKB: 1000\n      };\n    },\n    component: function () {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: this.route,\n        element: /*#__PURE__*/_jsxDEV(Page, {\n          demo: false,\n          method: {\n            methodName: 'deso.nft.transferNft(request)',\n            params: this.params,\n            method: this.method\n          },\n          pretext: PageSection(this.title, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Transfer an NFT.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 48\n          }, this)),\n          chapters: CHAPTERS,\n          selectedChapter: this\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 13\n        }, this)\n      }, this.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 9\n      }, this);\n    }\n  },\n  ACCEPT_NFT_TRANSFER: {\n    parentRoute: ParentRoutes.nft,\n    title: 'Accept Transfer Nft',\n    route: '/nft/accept-nft-transfer',\n    githubSource: [],\n    documentation: ['https://docs.deso.org/for-developers/backend/transactions/construct-transactions/nft-transactions-api#accept-nft-transfer'],\n    method: deso.nft.acceptNftTransfer,\n    params: () => {\n      return {\n        MinFeeRateNanosPerKB: 1000,\n        NFTPostHashHex: SAMPLE_NFT_POST,\n        SerialNumber: 1,\n        UpdaterPublicKeyBase58Check: localStorage.getItem('login_key')\n      };\n    },\n    component: function () {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: this.route,\n        element: /*#__PURE__*/_jsxDEV(Page, {\n          demo: false,\n          method: {\n            methodName: 'deso.nft.acceptNftTransfer(request)',\n            params: this.params,\n            method: this.method\n          },\n          pretext: PageSection(this.title, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Accept a transfer NFT.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 17\n          }, this)),\n          chapters: CHAPTERS,\n          selectedChapter: this\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 13\n        }, this)\n      }, this.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 9\n      }, this);\n    }\n  },\n  BURN_NFT: {\n    parentRoute: ParentRoutes.nft,\n    title: 'Burn Nft',\n    route: '/nft/burn-nft',\n    githubSource: [],\n    documentation: ['https://docs.deso.org/for-developers/backend/transactions/construct-transactions/nft-transactions-api#burn-nft'],\n    method: deso.nft.burnNft,\n    params: () => {\n      return {\n        MinFeeRateNanosPerKB: 1000,\n        NFTPostHashHex: SAMPLE_NFT_POST,\n        SerialNumber: 1,\n        UpdaterPublicKeyBase58Check: localStorage.getItem('login_key')\n      };\n    },\n    component: function () {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: this.route,\n        element: /*#__PURE__*/_jsxDEV(Page, {\n          demo: false,\n          method: {\n            methodName: 'deso.nft.burnNft(request)',\n            params: this.params,\n            method: this.method\n          },\n          pretext: PageSection(this.title, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Burn an NFT.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 48\n          }, this)),\n          chapters: CHAPTERS,\n          selectedChapter: this\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 13\n        }, this)\n      }, this.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 9\n      }, this);\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/tyler/Documents/DeSo/deso-workspace/apps/developer-hub/src/chapters/ChapterHelper/nftChapter.tsx"],"names":["Route","CHAPTERS","Deso","ParentRoutes","TYLER","DEZO_DOG","SAMPLE_POST","SAMPLE_NFT_POST","Page","PageSection","deso","nftChapter","GET_NFTS_FOR_USER","parentRoute","nft","title","route","method","getNftsForUser","params","UserPublicKeyBase58Check","localStorage","getItem","githubSource","documentation","component","methodName","GET_NFT_BIDS_FOR_USER","getNftBidsForUser","GET_NFT_BIDS_FOR_NFT_POST","getNftBidsForNftPost","PostHashHex","GET_NFT_SHOWCASE","getNftShowcase","ReaderPublicKeyBase58Check","GET_NEXT_NFT_SHOWCASE","getNextNftShowCase","GET_NFT_COLLECTION_SUMMARY","getNftCollectionSummary","GET_NFT_ENTRIES_FOR_POST_HASH","getNftEntriesForPostHash","CREATE_NFT","createNft","UpdaterPublicKeyBase58Check","NFTPostHashHex","NumCopies","NFTRoyaltyToCreatorBasisPoints","NFTRoyaltyToCoinBasisPoints","HasUnlockable","IsForSale","MinFeeRateNanosPerKB","UPDATE_NFT","updateNft","SerialNumber","MinBidAmountNanos","CREATE_NFT_BID","createNftBid","BidAmountNanos","ACCEPT_NFT_BID","acceptNftBid","BidderPublicKeyBase58Check","TRANSFER_NFT","transferNft","SenderPublicKeyBase58Check","ReceiverPublicKeyBase58Check","ACCEPT_NFT_TRANSFER","acceptNftTransfer","BURN_NFT","burnNft"],"mappings":"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","sourcesContent":["import { Route } from 'react-router-dom';\r\nimport { CHAPTERS } from './Chapter.models';\r\nimport Deso from 'deso-protocol';\r\nimport {\r\n  ParentRoutes,\r\n  TYLER,\r\n  DEZO_DOG,\r\n  SAMPLE_POST,\r\n  SAMPLE_NFT_POST,\r\n} from '../../services/utils';\r\nimport {\r\n  AcceptNFTBidRequest,\r\n  AcceptNFTTransferRequest,\r\n  BurnNFTRequest,\r\n  CreateNFTBidRequest,\r\n  CreateNFTRequest,\r\n  GetNFTBidsForNFTPostRequest,\r\n  GetNFTBidsForUserRequest,\r\n  GetNFTCollectionSummaryRequest,\r\n  GetNFTEntriesForPostHashRequest,\r\n  GetNFTsForUserRequest,\r\n  GetNFTShowcaseRequest,\r\n  TransferNFTRequest,\r\n  UpdateNFTRequest,\r\n} from 'deso-protocol-types';\r\nimport Page from '../Read/Page';\r\nimport { PageSection } from './PageSections';\r\nconst deso = new Deso();\r\n\r\nexport const nftChapter = {\r\n  GET_NFTS_FOR_USER: {\r\n    parentRoute: ParentRoutes.nft,\r\n    title: 'Get Nfts For User',\r\n    route: '/nft/get-nfts-for-user',\r\n    method: deso.nft.getNftsForUser,\r\n    params: () => {\r\n      return {\r\n        UserPublicKeyBase58Check:\r\n          (localStorage.getItem('login_key') as string) || DEZO_DOG,\r\n      } as GetNFTsForUserRequest;\r\n    },\r\n    githubSource: [],\r\n    documentation: [\r\n      'https://docs.deso.org/for-developers/backend/blockchain-data/api/nft-endpoints#get-nfts-for-user',\r\n    ],\r\n    component: function () {\r\n      return (\r\n        <Route\r\n          key={this.title}\r\n          path={this.route}\r\n          element={\r\n            <Page\r\n              demo={true}\r\n              method={{\r\n                methodName: 'deso.nft.getNftsForUser(request)',\r\n                params: this.params,\r\n                method: this.method,\r\n              }}\r\n              pretext={PageSection(\r\n                this.title,\r\n                <div>Get the nfts that belongs to an account.</div>\r\n              )}\r\n              chapters={CHAPTERS}\r\n              selectedChapter={this}\r\n            />\r\n          }\r\n        ></Route>\r\n      );\r\n    },\r\n  },\r\n  GET_NFT_BIDS_FOR_USER: {\r\n    parentRoute: ParentRoutes.nft,\r\n    title: 'Get Nft Bids For User',\r\n    route: '/nft/get-nft-bids-for-user',\r\n    method: deso.nft.getNftBidsForUser,\r\n    params: () => {\r\n      return { UserPublicKeyBase58Check: DEZO_DOG } as GetNFTBidsForUserRequest;\r\n    },\r\n    githubSource: [],\r\n    documentation: [\r\n      'https://docs.deso.org/for-developers/backend/blockchain-data/api/nft-endpoints#get-nft-bids-for-user',\r\n    ],\r\n    component: function () {\r\n      return (\r\n        <Route\r\n          key={this.title}\r\n          path={this.route}\r\n          element={\r\n            <Page\r\n              demo={true}\r\n              method={{\r\n                methodName: 'deso.nft.getNftBidsForUser(request)',\r\n                params: this.params,\r\n                method: this.method,\r\n              }}\r\n              pretext={PageSection(\r\n                this.title,\r\n                <div>Get active bids for a user.</div>\r\n              )}\r\n              chapters={CHAPTERS}\r\n              selectedChapter={this}\r\n            />\r\n          }\r\n        ></Route>\r\n      );\r\n    },\r\n  },\r\n  GET_NFT_BIDS_FOR_NFT_POST: {\r\n    parentRoute: ParentRoutes.nft,\r\n    title: 'Get Nft Bids For Nft Post',\r\n    route: '/nft/get-nft-bids-for-nft-post',\r\n    githubSource: [],\r\n    method: deso.nft.getNftBidsForNftPost,\r\n    params: () => {\r\n      return { PostHashHex: SAMPLE_POST } as GetNFTBidsForNFTPostRequest;\r\n    },\r\n    documentation: [\r\n      'https://docs.deso.org/for-developers/backend/blockchain-data/api/nft-endpoints#get-nft-bids-for-nft-post',\r\n    ],\r\n    component: function () {\r\n      return (\r\n        <Route\r\n          key={this.title}\r\n          path={this.route}\r\n          element={\r\n            <Page\r\n              demo={true}\r\n              method={{\r\n                methodName: 'deso.nft.getNftBidsForNftPost(request)',\r\n                params: this.params,\r\n                method: this.method,\r\n              }}\r\n              pretext={PageSection(\r\n                this.title,\r\n                <div>Get all bids for all serial numbers of a given post</div>\r\n              )}\r\n              chapters={CHAPTERS}\r\n              selectedChapter={this}\r\n            />\r\n          }\r\n        ></Route>\r\n      );\r\n    },\r\n  },\r\n  GET_NFT_SHOWCASE: {\r\n    parentRoute: ParentRoutes.nft,\r\n    title: 'Get Nft Showcase',\r\n    route: '/nft/get-nft-showcase',\r\n    githubSource: [],\r\n    documentation: [\r\n      'https://docs.deso.org/for-developers/backend/blockchain-data/api/nft-endpoints#get-nft-showcase',\r\n    ],\r\n    method: deso.nft.getNftShowcase,\r\n    params: () => {\r\n      return { ReaderPublicKeyBase58Check: DEZO_DOG } as GetNFTShowcaseRequest;\r\n    },\r\n    component: function () {\r\n      return (\r\n        <Route\r\n          key={this.title}\r\n          path={this.route}\r\n          element={\r\n            <Page\r\n              demo={true}\r\n              method={{\r\n                methodName: 'deso.nft.getNftShowcase(request)',\r\n                params: this.params,\r\n                method: this.method,\r\n              }}\r\n              pretext={PageSection(\r\n                this.title,\r\n                <div>\r\n                  Get summaries of all NFTs included in the NFT showcase.\r\n                </div>\r\n              )}\r\n              chapters={CHAPTERS}\r\n              selectedChapter={this}\r\n            />\r\n          }\r\n        ></Route>\r\n      );\r\n    },\r\n  },\r\n  GET_NEXT_NFT_SHOWCASE: {\r\n    parentRoute: ParentRoutes.nft,\r\n    title: 'Get Next Nft Showcase',\r\n    route: '/nft/get-next-nft-showcase',\r\n    githubSource: [],\r\n    documentation: [\r\n      'https://docs.deso.org/for-developers/backend/blockchain-data/api/nft-endpoints#get-next-nft-showcase',\r\n    ],\r\n    method: deso.nft.getNextNftShowCase,\r\n    params: () => {\r\n      return { ReaderPublicKeyBase58Check: TYLER } as GetNFTShowcaseRequest;\r\n    },\r\n    component: function () {\r\n      return (\r\n        <Route\r\n          key={this.title}\r\n          path={this.route}\r\n          element={\r\n            <Page\r\n              demo={true}\r\n              method={{\r\n                methodName: 'deso.nft.getNextNftShowCase(request)',\r\n                params: this.params,\r\n                method: this.method,\r\n              }}\r\n              pretext={PageSection(\r\n                this.title,\r\n                <div>Get the time of the next NFT showcase drop.</div>\r\n              )}\r\n              chapters={CHAPTERS}\r\n              selectedChapter={this}\r\n            />\r\n          }\r\n        ></Route>\r\n      );\r\n    },\r\n  },\r\n  GET_NFT_COLLECTION_SUMMARY: {\r\n    parentRoute: ParentRoutes.nft,\r\n    title: 'Get Nft Collection Summary',\r\n    route: '/nft/get-nft-collection-summary',\r\n    githubSource: [],\r\n    documentation: [\r\n      'https://docs.deso.org/for-developers/backend/blockchain-data/api/nft-endpoints#get-nft-collection-summary',\r\n    ],\r\n    method: deso.nft.getNftCollectionSummary,\r\n    params: () => {\r\n      return { PostHashHex: SAMPLE_POST } as GetNFTCollectionSummaryRequest;\r\n    },\r\n    component: function () {\r\n      return (\r\n        <Route\r\n          key={this.title}\r\n          path={this.route}\r\n          element={\r\n            <Page\r\n              demo={true}\r\n              method={{\r\n                methodName: 'deso.nft.getNftCollectionSummary(request)',\r\n                params: this.params,\r\n                method: this.method,\r\n              }}\r\n              pretext={PageSection(\r\n                this.title,\r\n                <div>Get information on a NFT collection.</div>\r\n              )}\r\n              chapters={CHAPTERS}\r\n              selectedChapter={this}\r\n            />\r\n          }\r\n        ></Route>\r\n      );\r\n    },\r\n  },\r\n  GET_NFT_ENTRIES_FOR_POST_HASH: {\r\n    parentRoute: ParentRoutes.nft,\r\n    title: 'Get Nft Entries For Post Hash',\r\n    route: '/nft/get-nft-entries-for-post-hash',\r\n    githubSource: [],\r\n    documentation: [\r\n      'https://docs.deso.org/for-developers/backend/blockchain-data/api/nft-endpoints#get-nft-entries-for-post-hash',\r\n    ],\r\n    method: deso.nft.getNftEntriesForPostHash,\r\n    params: () => {\r\n      return { PostHashHex: SAMPLE_POST } as GetNFTEntriesForPostHashRequest;\r\n    },\r\n    component: function () {\r\n      return (\r\n        <Route\r\n          key={this.title}\r\n          path={this.route}\r\n          element={\r\n            <Page\r\n              demo={true}\r\n              method={{\r\n                methodName: 'deso.nft.getNftEntriesForPostHash(request)',\r\n                params: this.params,\r\n                method: this.method,\r\n              }}\r\n              pretext={PageSection(\r\n                this.title,\r\n                <div>\r\n                  Get an NFT entry response for each serial number of this NFT\r\n                  post.\r\n                </div>\r\n              )}\r\n              chapters={CHAPTERS}\r\n              selectedChapter={this}\r\n            />\r\n          }\r\n        ></Route>\r\n      );\r\n    },\r\n  },\r\n\r\n  CREATE_NFT: {\r\n    parentRoute: ParentRoutes.nft,\r\n    title: 'Create Nft',\r\n    route: '/nft/create-nft',\r\n    githubSource: [],\r\n    documentation: [\r\n      'https://docs.deso.org/for-developers/backend/transactions/construct-transactions/nft-transactions-api#create-nft',\r\n    ],\r\n    method: deso.nft.createNft,\r\n    params: () => {\r\n      return {\r\n        UpdaterPublicKeyBase58Check: localStorage.getItem(\r\n          'login_key'\r\n        ) as string,\r\n        NFTPostHashHex: SAMPLE_NFT_POST,\r\n        NumCopies: 1,\r\n        NFTRoyaltyToCreatorBasisPoints: 100,\r\n        NFTRoyaltyToCoinBasisPoints: 100,\r\n        HasUnlockable: false,\r\n        IsForSale: false,\r\n        MinFeeRateNanosPerKB: 1000,\r\n      } as Partial<CreateNFTRequest>;\r\n    },\r\n    component: function () {\r\n      return (\r\n        <Route\r\n          key={this.title}\r\n          path={this.route}\r\n          element={\r\n            <Page\r\n              demo={false}\r\n              method={{\r\n                methodName: 'deso.nft.createNft(request)',\r\n                params: this.params,\r\n                method: this.method,\r\n              }}\r\n              pretext={PageSection(this.title, <div>Create an NFT.</div>)}\r\n              chapters={CHAPTERS}\r\n              selectedChapter={this}\r\n            />\r\n          }\r\n        ></Route>\r\n      );\r\n    },\r\n  },\r\n\r\n  UPDATE_NFT: {\r\n    parentRoute: ParentRoutes.nft,\r\n    title: 'Update Nft',\r\n    route: '/nft/update-nft',\r\n    githubSource: [],\r\n    documentation: [\r\n      'https://docs.deso.org/for-developers/backend/transactions/construct-transactions/nft-transactions-api#update-nft',\r\n    ],\r\n    method: deso.nft.updateNft,\r\n    params: () => {\r\n      return {\r\n        UpdaterPublicKeyBase58Check: localStorage.getItem(\r\n          'login_key'\r\n        ) as string,\r\n        NFTPostHashHex: SAMPLE_NFT_POST,\r\n        SerialNumber: 1,\r\n        IsForSale: true,\r\n        MinBidAmountNanos: 100,\r\n        MinFeeRateNanosPerKB: 1000,\r\n      } as UpdateNFTRequest;\r\n    },\r\n    component: function () {\r\n      return (\r\n        <Route\r\n          key={this.title}\r\n          path={this.route}\r\n          element={\r\n            <Page\r\n              demo={false}\r\n              method={{\r\n                methodName: 'deso.nft.updateNft(request)',\r\n                params: this.params,\r\n                method: this.method,\r\n              }}\r\n              pretext={PageSection(this.title, <div>Update an NFT.</div>)}\r\n              chapters={CHAPTERS}\r\n              selectedChapter={this}\r\n            />\r\n          }\r\n        ></Route>\r\n      );\r\n    },\r\n  },\r\n  CREATE_NFT_BID: {\r\n    parentRoute: ParentRoutes.nft,\r\n    title: 'Create Nft Bid',\r\n    route: '/nft/create-nft-bid',\r\n    githubSource: [],\r\n    documentation: [\r\n      'https://docs.deso.org/for-developers/backend/transactions/construct-transactions/nft-transactions-api#create-nft-bid',\r\n    ],\r\n    method: deso.nft.createNftBid,\r\n    params: () => {\r\n      return {\r\n        UpdaterPublicKeyBase58Check: localStorage.getItem(\r\n          'login_key'\r\n        ) as string,\r\n        NFTPostHashHex: SAMPLE_NFT_POST,\r\n        SerialNumber: 1,\r\n        BidAmountNanos: 100,\r\n        MinFeeRateNanosPerKB: 1000,\r\n      } as CreateNFTBidRequest;\r\n    },\r\n    component: function () {\r\n      return (\r\n        <Route\r\n          key={this.title}\r\n          path={this.route}\r\n          element={\r\n            <Page\r\n              demo={false}\r\n              method={{\r\n                methodName: 'deso.nft.createNftBid(request)',\r\n                params: this.params,\r\n                method: this.method,\r\n              }}\r\n              pretext={PageSection(\r\n                this.title,\r\n                <div>Make a bid on an existing NFT.</div>\r\n              )}\r\n              chapters={CHAPTERS}\r\n              selectedChapter={this}\r\n            />\r\n          }\r\n        ></Route>\r\n      );\r\n    },\r\n  },\r\n  ACCEPT_NFT_BID: {\r\n    parentRoute: ParentRoutes.nft,\r\n    title: 'Accept Nft Bid',\r\n    route: '/nft/accept-nft-bid',\r\n    githubSource: [],\r\n    documentation: [\r\n      'https://docs.deso.org/for-developers/backend/transactions/construct-transactions/nft-transactions-api#accept-nft-bid',\r\n    ],\r\n    method: deso.nft.acceptNftBid,\r\n    params: () => {\r\n      return {\r\n        UpdaterPublicKeyBase58Check: localStorage.getItem(\r\n          'login_key'\r\n        ) as string,\r\n        BidderPublicKeyBase58Check: DEZO_DOG,\r\n        NFTPostHashHex: SAMPLE_NFT_POST,\r\n        SerialNumber: 1,\r\n        BidAmountNanos: 100,\r\n        MinFeeRateNanosPerKB: 1000,\r\n      } as AcceptNFTBidRequest;\r\n    },\r\n    component: function () {\r\n      return (\r\n        <Route\r\n          key={this.title}\r\n          path={this.route}\r\n          element={\r\n            <Page\r\n              demo={false}\r\n              method={{\r\n                methodName: 'deso.nft.acceptNftBid(request)',\r\n                params: this.params,\r\n                method: this.method,\r\n              }}\r\n              pretext={PageSection(this.title, <div>Accept an NFT bid.</div>)}\r\n              chapters={CHAPTERS}\r\n              selectedChapter={this}\r\n            />\r\n          }\r\n        ></Route>\r\n      );\r\n    },\r\n  },\r\n\r\n  TRANSFER_NFT: {\r\n    parentRoute: ParentRoutes.nft,\r\n    title: 'Transfer Nft',\r\n    route: '/nft/transfer-nft',\r\n    githubSource: [],\r\n    documentation: [\r\n      'https://docs.deso.org/for-developers/backend/transactions/construct-transactions/nft-transactions-api#transfer-nft',\r\n    ],\r\n    method: deso.nft.transferNft,\r\n    params: () => {\r\n      return {\r\n        SenderPublicKeyBase58Check: localStorage.getItem('login_key') as string,\r\n        ReceiverPublicKeyBase58Check: TYLER,\r\n        NFTPostHashHex: SAMPLE_NFT_POST,\r\n        SerialNumber: 1,\r\n        MinFeeRateNanosPerKB: 1000,\r\n      } as TransferNFTRequest;\r\n    },\r\n    component: function () {\r\n      return (\r\n        <Route\r\n          key={this.title}\r\n          path={this.route}\r\n          element={\r\n            <Page\r\n              demo={false}\r\n              method={{\r\n                methodName: 'deso.nft.transferNft(request)',\r\n                params: this.params,\r\n                method: this.method,\r\n              }}\r\n              pretext={PageSection(this.title, <div>Transfer an NFT.</div>)}\r\n              chapters={CHAPTERS}\r\n              selectedChapter={this}\r\n            />\r\n          }\r\n        ></Route>\r\n      );\r\n    },\r\n  },\r\n  ACCEPT_NFT_TRANSFER: {\r\n    parentRoute: ParentRoutes.nft,\r\n    title: 'Accept Transfer Nft',\r\n    route: '/nft/accept-nft-transfer',\r\n    githubSource: [],\r\n    documentation: [\r\n      'https://docs.deso.org/for-developers/backend/transactions/construct-transactions/nft-transactions-api#accept-nft-transfer',\r\n    ],\r\n    method: deso.nft.acceptNftTransfer,\r\n    params: () => {\r\n      return {\r\n        MinFeeRateNanosPerKB: 1000,\r\n        NFTPostHashHex: SAMPLE_NFT_POST,\r\n        SerialNumber: 1,\r\n        UpdaterPublicKeyBase58Check: localStorage.getItem(\r\n          'login_key'\r\n        ) as string,\r\n      } as AcceptNFTTransferRequest;\r\n    },\r\n    component: function () {\r\n      return (\r\n        <Route\r\n          key={this.title}\r\n          path={this.route}\r\n          element={\r\n            <Page\r\n              demo={false}\r\n              method={{\r\n                methodName: 'deso.nft.acceptNftTransfer(request)',\r\n                params: this.params,\r\n                method: this.method,\r\n              }}\r\n              pretext={PageSection(\r\n                this.title,\r\n                <div>Accept a transfer NFT.</div>\r\n              )}\r\n              chapters={CHAPTERS}\r\n              selectedChapter={this}\r\n            />\r\n          }\r\n        ></Route>\r\n      );\r\n    },\r\n  },\r\n\r\n  BURN_NFT: {\r\n    parentRoute: ParentRoutes.nft,\r\n    title: 'Burn Nft',\r\n    route: '/nft/burn-nft',\r\n    githubSource: [],\r\n    documentation: [\r\n      'https://docs.deso.org/for-developers/backend/transactions/construct-transactions/nft-transactions-api#burn-nft',\r\n    ],\r\n    method: deso.nft.burnNft,\r\n    params: () => {\r\n      return {\r\n        MinFeeRateNanosPerKB: 1000,\r\n        NFTPostHashHex: SAMPLE_NFT_POST,\r\n        SerialNumber: 1,\r\n        UpdaterPublicKeyBase58Check: localStorage.getItem(\r\n          'login_key'\r\n        ) as string,\r\n      } as BurnNFTRequest;\r\n    },\r\n    component: function () {\r\n      return (\r\n        <Route\r\n          key={this.title}\r\n          path={this.route}\r\n          element={\r\n            <Page\r\n              demo={false}\r\n              method={{\r\n                methodName: 'deso.nft.burnNft(request)',\r\n                params: this.params,\r\n                method: this.method,\r\n              }}\r\n              pretext={PageSection(this.title, <div>Burn an NFT.</div>)}\r\n              chapters={CHAPTERS}\r\n              selectedChapter={this}\r\n            />\r\n          }\r\n        ></Route>\r\n      );\r\n    },\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}