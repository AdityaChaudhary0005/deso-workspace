{"ast":null,"code":"import \"core-js/modules/es.object.assign.js\";\nimport { uuid } from '../../utils/utils';\nimport { iFrameHandler } from './WindowHandler';\nimport { requestApproval } from './WindowPrompts';\nexport const callIdentityMethodAndExecute = (attributeValue, method) => {\n  var _getIframe$contentWin;\n\n  const user = JSON.parse(localStorage.getItem('login_user'));\n  const {\n    accessLevelHmac,\n    encryptedSeedHex,\n    accessLevel\n  } = user;\n  const request = {\n    id: uuid(),\n    service: 'identity',\n    method: method,\n    payload: Object.assign({\n      accessLevelHmac,\n      encryptedSeedHex,\n      accessLevel\n    }, getParams(method, attributeValue))\n  };\n  (_getIframe$contentWin = getIframe().contentWindow) == null ? void 0 : _getIframe$contentWin.postMessage(request, '*');\n  return iFrameHandler({\n    iFrameMethod: method,\n    data: getParams(method, attributeValue)\n  });\n};\nexport const approveSignAndSubmit = transactionHex => {\n  const prompt = requestApproval(transactionHex);\n  return iFrameHandler({\n    iFrameMethod: 'sign',\n    data: {\n      prompt\n    }\n  });\n};\nexport const getIframe = () => {\n  const iframe = document.getElementById('identity');\n  return iframe;\n};\n\nconst getParams = (method, attributeValue) => {\n  if (method === 'sign') {\n    return {\n      transactionHex: attributeValue\n    };\n  }\n\n  if (method === 'encrypt') {\n    return {\n      message: attributeValue.MessageText,\n      recipientPublicKey: attributeValue.RecipientPublicKeyBase58Check\n    };\n  }\n\n  if (method === 'decrypt') {\n    return {\n      encryptedMessages: attributeValue\n    };\n  }\n\n  return undefined;\n};","map":{"version":3,"sources":["C:/Users/tyler/Documents/DeSo/deso-workspace/libs/deso-protocol/src/lib/identity/IdentityHelper.ts"],"names":["uuid","iFrameHandler","requestApproval","callIdentityMethodAndExecute","attributeValue","method","user","JSON","parse","localStorage","getItem","accessLevelHmac","encryptedSeedHex","accessLevel","request","id","service","payload","getParams","getIframe","contentWindow","postMessage","iFrameMethod","data","approveSignAndSubmit","transactionHex","prompt","iframe","document","getElementById","message","MessageText","recipientPublicKey","RecipientPublicKeyBase58Check","encryptedMessages","undefined"],"mappings":";AAAA,SAASA,IAAT,QAAqB,mBAArB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,eAAT,QAAgC,iBAAhC;AAUA,OAAO,MAAMC,4BAA4B,GAAG,CAC1CC,cAD0C,EAE1CC,MAF0C,KAGzB;AAAA;;AACjB,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAX,CAAb;AACA,QAAM;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA,gBAAnB;AAAqCC,IAAAA;AAArC,MAAqDP,IAA3D;AACA,QAAMQ,OAAO,GAAG;AACdC,IAAAA,EAAE,EAAEf,IAAI,EADM;AAEdgB,IAAAA,OAAO,EAAE,UAFK;AAGdX,IAAAA,MAAM,EAAEA,MAHM;AAIdY,IAAAA,OAAO;AACLN,MAAAA,eADK;AAELC,MAAAA,gBAFK;AAGLC,MAAAA;AAHK,OAIFK,SAAS,CAACb,MAAD,EAASD,cAAT,CAJP;AAJO,GAAhB;AAWA,2BAAAe,SAAS,GAAGC,aAAZ,2CAA2BC,WAA3B,CAAuCP,OAAvC,EAAgD,GAAhD;AACA,SAAOb,aAAa,CAAC;AACnBqB,IAAAA,YAAY,EAAEjB,MADK;AAEnBkB,IAAAA,IAAI,EAAEL,SAAS,CAACb,MAAD,EAASD,cAAT;AAFI,GAAD,CAApB;AAID,CAtBM;AAwBP,OAAO,MAAMoB,oBAAoB,GAAIC,cAAD,IAA0C;AAC5E,QAAMC,MAAM,GAAGxB,eAAe,CAACuB,cAAD,CAA9B;AACA,SAAOxB,aAAa,CAAC;AAAEqB,IAAAA,YAAY,EAAE,MAAhB;AAAwBC,IAAAA,IAAI,EAAE;AAAEG,MAAAA;AAAF;AAA9B,GAAD,CAApB;AACD,CAHM;AAKP,OAAO,MAAMP,SAAS,GAAG,MAAyB;AAChD,QAAMQ,MAAgC,GAAGC,QAAQ,CAACC,cAAT,CACvC,UADuC,CAAzC;AAGA,SAAOF,MAAP;AACD,CALM;;AAOP,MAAMT,SAAS,GAAG,CAACb,MAAD,EAAiBD,cAAjB,KAAyC;AACzD,MAAIC,MAAM,KAAK,MAAf,EAAuB;AACrB,WAAO;AAAEoB,MAAAA,cAAc,EAAErB;AAAlB,KAAP;AACD;;AACD,MAAIC,MAAM,KAAK,SAAf,EAA0B;AACxB,WAAO;AACLyB,MAAAA,OAAO,EAAE1B,cAAc,CAAC2B,WADnB;AAELC,MAAAA,kBAAkB,EAAE5B,cAAc,CAAC6B;AAF9B,KAAP;AAID;;AACD,MAAI5B,MAAM,KAAK,SAAf,EAA0B;AACxB,WAAO;AAAE6B,MAAAA,iBAAiB,EAAE9B;AAArB,KAAP;AACD;;AACD,SAAO+B,SAAP;AACD,CAdD","sourcesContent":["import { uuid } from '../../utils/utils';\nimport { iFrameHandler } from './WindowHandler';\nimport { requestApproval } from './WindowPrompts';\n\nexport type IframeMethods =\n  | 'sign'\n  | 'encrypt'\n  | 'decrypt'\n  | 'jwt'\n  | 'login'\n  | 'logout';\n\nexport const callIdentityMethodAndExecute = (\n  attributeValue: unknown,\n  method: IframeMethods\n): Promise<any> => {\n  const user = JSON.parse(localStorage.getItem('login_user') as string);\n  const { accessLevelHmac, encryptedSeedHex, accessLevel } = user;\n  const request = {\n    id: uuid(),\n    service: 'identity',\n    method: method,\n    payload: {\n      accessLevelHmac,\n      encryptedSeedHex,\n      accessLevel,\n      ...getParams(method, attributeValue),\n    },\n  };\n  getIframe().contentWindow?.postMessage(request, '*');\n  return iFrameHandler({\n    iFrameMethod: method,\n    data: getParams(method, attributeValue),\n  });\n};\n\nexport const approveSignAndSubmit = (transactionHex: string): Promise<any> => {\n  const prompt = requestApproval(transactionHex);\n  return iFrameHandler({ iFrameMethod: 'sign', data: { prompt } });\n};\n\nexport const getIframe = (): HTMLIFrameElement => {\n  const iframe: HTMLIFrameElement | null = document.getElementById(\n    'identity'\n  ) as HTMLIFrameElement;\n  return iframe;\n};\n\nconst getParams = (method: string, attributeValue: any) => {\n  if (method === 'sign') {\n    return { transactionHex: attributeValue };\n  }\n  if (method === 'encrypt') {\n    return {\n      message: attributeValue.MessageText,\n      recipientPublicKey: attributeValue.RecipientPublicKeyBase58Check,\n    };\n  }\n  if (method === 'decrypt') {\n    return { encryptedMessages: attributeValue };\n  }\n  return undefined;\n};\n"]},"metadata":{},"sourceType":"module"}