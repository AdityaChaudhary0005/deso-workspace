{"ast":null,"code":"import \"core-js/modules/es.promise.js\";\nimport axios from 'axios';\nimport { throwErrors } from '../../utils/utils';\nexport class Posts {\n  constructor(node, identity) {\n    this.node = void 0;\n    this.identity = void 0;\n    this.node = node;\n    this.identity = identity;\n  }\n\n  async getPostsForPublicKey(ReaderPublicKeyBase58Check, Username) {\n    const request = {\n      PublicKeyBase58Check: '',\n      Username,\n      ReaderPublicKeyBase58Check,\n      NumToFetch: 10\n    };\n    return (await axios.post(`${this.node.getUri()}/get-posts-for-public-key`, request)).data;\n  }\n\n  async submitPost(request, extraData) {\n    if (!request.UpdaterPublicKeyBase58Check) {\n      throw Error('UpdaterPublicKeyBase58Check is required');\n    }\n\n    if (!request.BodyObj) {\n      throw Error('BodyObj is required');\n    }\n\n    if (!request.MinFeeRateNanosPerKB) {\n      request.MinFeeRateNanosPerKB = 1500;\n    }\n\n    const apiResponse = (await axios.post(`${this.node.getUri()}/submit-post`, request)).data;\n    return await this.identity.submitTransaction(apiResponse.TransactionHex, extraData).then(() => apiResponse).catch(() => {\n      throw Error('something went wrong while signing');\n    });\n  }\n\n  async getPostsStateless(request) {\n    const endpoint = 'get-posts-stateless';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async getSinglePost(request) {\n    throwErrors(['PostHashHex'], request);\n    const endpoint = 'get-single-post';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async getHotFeed(request) {\n    const endpoint = 'get-hot-feed';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async getDiamondedPosts(request) {\n    const endpoint = 'get-diamonded-posts';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async getLikesForPost(request) {\n    const endpoint = 'get-likes-for-post';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async getDiamondsForPost(request) {\n    const endpoint = 'get-diamonds-for-post';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async getRepostsForPost(request) {\n    const endpoint = 'get-reposts-for-post';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async getQuoteRepostsForPost(request) {\n    const endpoint = 'get-quote-reposts-for-post';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n}\nPosts.transaction = void 0;","map":{"version":3,"sources":["C:/Users/tyler/Documents/DeSo/deso-workspace/libs/deso-protocol/src/lib/post/Posts.ts"],"names":["axios","throwErrors","Posts","constructor","node","identity","getPostsForPublicKey","ReaderPublicKeyBase58Check","Username","request","PublicKeyBase58Check","NumToFetch","post","getUri","data","submitPost","extraData","UpdaterPublicKeyBase58Check","Error","BodyObj","MinFeeRateNanosPerKB","apiResponse","submitTransaction","TransactionHex","then","catch","getPostsStateless","endpoint","getSinglePost","getHotFeed","getDiamondedPosts","getLikesForPost","getDiamondsForPost","getRepostsForPost","getQuoteRepostsForPost","transaction"],"mappings":"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","sourcesContent":["import {\r\n  GetDiamondsForPostRequest,\r\n  AppendExtraDataRequest,\r\n  GetDiamondsForPostResponse,\r\n  GetLikesForPostRequest,\r\n  GetLikesForPostResponse,\r\n  GetPostsDiamondedBySenderForReceiverRequest,\r\n  GetPostsDiamondedBySenderForReceiverResponse,\r\n  GetPostsForPublicKeyRequest,\r\n  GetPostsForPublicKeyResponse,\r\n  GetPostsStatelessRequest,\r\n  GetPostsStatelessResponse,\r\n  GetQuoteRepostsForPostRequest,\r\n  GetQuoteRepostsForPostResponse,\r\n  GetRepostsForPostRequest,\r\n  GetSinglePostRequest,\r\n  GetSinglePostResponse,\r\n  HotFeedPageRequest,\r\n  HotFeedPageResponse,\r\n  SubmitPostRequest,\r\n  SubmitPostResponse,\r\n} from 'deso-protocol-types';\r\nimport axios from 'axios';\r\nimport { Identity } from '../identity/Identity';\r\nimport { Node } from '../node/Node';\r\nimport { Transactions } from '../transaction/Transaction';\r\nimport { throwErrors } from '../../utils/utils';\r\nexport class Posts {\r\n  static transaction: Transactions;\r\n  private node: Node;\r\n  private identity: Identity;\r\n  constructor(node: Node, identity: Identity) {\r\n    this.node = node;\r\n    this.identity = identity;\r\n  }\r\n\r\n  public async getPostsForPublicKey(\r\n    ReaderPublicKeyBase58Check: string,\r\n    Username: string\r\n  ): Promise<GetPostsForPublicKeyResponse> {\r\n    const request: Partial<GetPostsForPublicKeyRequest> = {\r\n      PublicKeyBase58Check: '',\r\n      Username,\r\n      ReaderPublicKeyBase58Check,\r\n      NumToFetch: 10,\r\n    };\r\n    return (\r\n      await axios.post(\r\n        `${this.node.getUri()}/get-posts-for-public-key`,\r\n        request\r\n      )\r\n    ).data;\r\n  }\r\n\r\n  public async submitPost(\r\n    request: Partial<SubmitPostRequest>,\r\n    extraData?: Omit<AppendExtraDataRequest, 'TransactionHex'>\r\n  ): Promise<SubmitPostResponse> {\r\n    if (!request.UpdaterPublicKeyBase58Check) {\r\n      throw Error('UpdaterPublicKeyBase58Check is required');\r\n    }\r\n    if (!request.BodyObj) {\r\n      throw Error('BodyObj is required');\r\n    }\r\n    if (!request.MinFeeRateNanosPerKB) {\r\n      request.MinFeeRateNanosPerKB = 1500;\r\n    }\r\n\r\n    const apiResponse: SubmitPostResponse = (\r\n      await axios.post(`${this.node.getUri()}/submit-post`, request)\r\n    ).data;\r\n    return await this.identity\r\n      .submitTransaction(apiResponse.TransactionHex, extraData)\r\n      .then(() => apiResponse)\r\n      .catch(() => {\r\n        throw Error('something went wrong while signing');\r\n      });\r\n  }\r\n\r\n  public async getPostsStateless(\r\n    request: Partial<GetPostsStatelessRequest>\r\n  ): Promise<GetPostsStatelessResponse> {\r\n    const endpoint = 'get-posts-stateless';\r\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\r\n  }\r\n\r\n  public async getSinglePost(\r\n    request: Partial<GetSinglePostRequest>\r\n  ): Promise<GetSinglePostResponse> {\r\n    throwErrors(['PostHashHex'], request);\r\n    const endpoint = 'get-single-post';\r\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\r\n  }\r\n\r\n  public async getHotFeed(\r\n    request: Partial<HotFeedPageRequest>\r\n  ): Promise<HotFeedPageResponse> {\r\n    const endpoint = 'get-hot-feed';\r\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\r\n  }\r\n\r\n  public async getDiamondedPosts(\r\n    request: Partial<GetPostsDiamondedBySenderForReceiverRequest>\r\n  ): Promise<GetPostsDiamondedBySenderForReceiverResponse> {\r\n    const endpoint = 'get-diamonded-posts';\r\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\r\n  }\r\n\r\n  public async getLikesForPost(\r\n    request: Partial<GetLikesForPostRequest>\r\n  ): Promise<GetLikesForPostResponse> {\r\n    const endpoint = 'get-likes-for-post';\r\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\r\n  }\r\n\r\n  public async getDiamondsForPost(\r\n    request: Partial<GetDiamondsForPostRequest>\r\n  ): Promise<GetDiamondsForPostResponse> {\r\n    const endpoint = 'get-diamonds-for-post';\r\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\r\n  }\r\n\r\n  public async getRepostsForPost(\r\n    request: Partial<GetRepostsForPostRequest>\r\n  ): Promise<HotFeedPageResponse> {\r\n    const endpoint = 'get-reposts-for-post';\r\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\r\n  }\r\n\r\n  public async getQuoteRepostsForPost(\r\n    request: Partial<GetQuoteRepostsForPostRequest>\r\n  ): Promise<GetQuoteRepostsForPostResponse> {\r\n    const endpoint = 'get-quote-reposts-for-post';\r\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}