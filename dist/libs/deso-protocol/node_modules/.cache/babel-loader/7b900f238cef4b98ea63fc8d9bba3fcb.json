{"ast":null,"code":"import \"core-js/modules/es.promise.js\";\nimport axios from 'axios';\nimport { throwErrors } from '../../utils/utils';\nexport class Posts {\n  constructor(node, identity) {\n    this.node = void 0;\n    this.identity = void 0;\n    this.node = node;\n    this.identity = identity;\n  }\n\n  async getPostsForPublicKey(ReaderPublicKeyBase58Check, Username) {\n    const request = {\n      PublicKeyBase58Check: '',\n      Username,\n      ReaderPublicKeyBase58Check,\n      NumToFetch: 10\n    };\n    return (await axios.post(`${this.node.getUri()}/get-posts-for-public-key`, request)).data;\n  }\n\n  async submitPost(request) {\n    var _request$BodyObj;\n\n    if (!request.UpdaterPublicKeyBase58Check) {\n      throw Error('UpdaterPublicKeyBase58Check is required');\n    }\n\n    if (!((_request$BodyObj = request.BodyObj) != null && _request$BodyObj.Body)) {\n      throw Error('BodyObj.Body is required');\n    }\n\n    if (!request.MinFeeRateNanosPerKB) {\n      request.MinFeeRateNanosPerKB = 1000;\n    }\n\n    const apiResponse = (await axios.post(`${this.node.getUri()}/submit-post`, request)).data;\n    return await this.identity.submitTransaction(apiResponse.TransactionHex).then(() => apiResponse).catch(() => {\n      throw Error('something went wrong while signing');\n    });\n  }\n\n  async getPostsStateless(request) {\n    const endpoint = 'get-posts-stateless';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async getSinglePost(request) {\n    throwErrors(['PostHashHex'], request);\n    const endpoint = 'get-single-post';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async getHotFeed(request) {\n    const endpoint = 'get-hot-feed';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async getDiamondedPosts(request) {\n    const endpoint = 'get-diamonded-posts';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async getLikesForPost(request) {\n    const endpoint = 'get-likes-for-post';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async getDiamondsForPost(request) {\n    const endpoint = 'get-diamonds-for-post';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async getRepostsForPost(request) {\n    const endpoint = 'get-reposts-for-post';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async getQuoteRepostsForPost(request) {\n    const endpoint = 'get-quote-reposts-for-post';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/tyler/Documents/DeSo/deso-workspace/libs/deso-protocol/src/lib/post/Posts.ts"],"names":["axios","throwErrors","Posts","constructor","node","identity","getPostsForPublicKey","ReaderPublicKeyBase58Check","Username","request","PublicKeyBase58Check","NumToFetch","post","getUri","data","submitPost","UpdaterPublicKeyBase58Check","Error","BodyObj","Body","MinFeeRateNanosPerKB","apiResponse","submitTransaction","TransactionHex","then","catch","getPostsStateless","endpoint","getSinglePost","getHotFeed","getDiamondedPosts","getLikesForPost","getDiamondsForPost","getRepostsForPost","getQuoteRepostsForPost"],"mappings":"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","sourcesContent":["import {\n  GetDiamondsForPostRequest,\n  GetDiamondsForPostResponse,\n  GetLikesForPostRequest,\n  GetLikesForPostResponse,\n  GetPostsDiamondedBySenderForReceiverRequest,\n  GetPostsDiamondedBySenderForReceiverResponse,\n  GetPostsForPublicKeyRequest,\n  GetPostsForPublicKeyResponse,\n  GetPostsStatelessRequest,\n  GetPostsStatelessResponse,\n  GetQuoteRepostsForPostRequest,\n  GetQuoteRepostsForPostResponse,\n  GetRepostsForPostRequest,\n  GetSinglePostRequest,\n  GetSinglePostResponse,\n  HotFeedPageRequest,\n  HotFeedPageResponse,\n  SubmitPostRequest,\n  SubmitPostResponse,\n} from 'deso-protocol-types';\nimport axios from 'axios';\nimport { Identity } from '../identity/Identity';\nimport { Node } from '../Node/Node';\nimport { throwErrors } from '../../utils/utils';\nexport class Posts {\n  node: Node;\n  identity: Identity;\n  constructor(node: Node, identity: Identity) {\n    this.node = node;\n    this.identity = identity;\n  }\n\n  public async getPostsForPublicKey(\n    ReaderPublicKeyBase58Check: string,\n    Username: string\n  ): Promise<GetPostsForPublicKeyResponse> {\n    const request: Partial<GetPostsForPublicKeyRequest> = {\n      PublicKeyBase58Check: '',\n      Username,\n      ReaderPublicKeyBase58Check,\n      NumToFetch: 10,\n    };\n    return (\n      await axios.post(\n        `${this.node.getUri()}/get-posts-for-public-key`,\n        request\n      )\n    ).data;\n  }\n\n  public async submitPost(\n    request: Partial<SubmitPostRequest>\n  ): Promise<SubmitPostResponse> {\n    if (!request.UpdaterPublicKeyBase58Check) {\n      throw Error('UpdaterPublicKeyBase58Check is required');\n    }\n    if (!request.BodyObj?.Body) {\n      throw Error('BodyObj.Body is required');\n    }\n    if (!request.MinFeeRateNanosPerKB) {\n      request.MinFeeRateNanosPerKB = 1000;\n    }\n    const apiResponse: SubmitPostResponse = (\n      await axios.post(`${this.node.getUri()}/submit-post`, request)\n    ).data;\n    return await this.identity\n      .submitTransaction(apiResponse.TransactionHex)\n      .then(() => apiResponse)\n      .catch(() => {\n        throw Error('something went wrong while signing');\n      });\n  }\n\n  public async getPostsStateless(\n    request: Partial<GetPostsStatelessRequest>\n  ): Promise<GetPostsStatelessResponse> {\n    const endpoint = 'get-posts-stateless';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  public async getSinglePost(\n    request: Partial<GetSinglePostRequest>\n  ): Promise<GetSinglePostResponse> {\n    throwErrors(['PostHashHex'], request);\n    const endpoint = 'get-single-post';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  public async getHotFeed(\n    request: Partial<HotFeedPageRequest>\n  ): Promise<HotFeedPageResponse> {\n    const endpoint = 'get-hot-feed';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  public async getDiamondedPosts(\n    request: Partial<GetPostsDiamondedBySenderForReceiverRequest>\n  ): Promise<GetPostsDiamondedBySenderForReceiverResponse> {\n    const endpoint = 'get-diamonded-posts';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  public async getLikesForPost(\n    request: Partial<GetLikesForPostRequest>\n  ): Promise<GetLikesForPostResponse> {\n    const endpoint = 'get-likes-for-post';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  public async getDiamondsForPost(\n    request: Partial<GetDiamondsForPostRequest>\n  ): Promise<GetDiamondsForPostResponse> {\n    const endpoint = 'get-diamonds-for-post';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  public async getRepostsForPost(\n    request: Partial<GetRepostsForPostRequest>\n  ): Promise<HotFeedPageResponse> {\n    const endpoint = 'get-reposts-for-post';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  public async getQuoteRepostsForPost(\n    request: Partial<GetQuoteRepostsForPostRequest>\n  ): Promise<GetQuoteRepostsForPostResponse> {\n    const endpoint = 'get-quote-reposts-for-post';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}