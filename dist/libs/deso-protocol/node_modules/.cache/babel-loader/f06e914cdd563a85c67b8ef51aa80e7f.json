{"ast":null,"code":"import \"core-js/modules/es.promise.js\";\nimport axios from 'axios';\nexport class Media {\n  constructor(node, identity) {\n    this.node = void 0;\n    this.identity = void 0;\n    this.node = node;\n    this.identity = identity;\n  }\n\n  async uploadImage(request) {\n    const endpoint = 'upload-image';\n    const formData = new FormData();\n    formData.append('file', request.file);\n    formData.append('UserPublicKeyBase58Check', request.UserPublicKeyBase58Check);\n    formData.append('JWT', request.JWT);\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async uploadVideo(request) {\n    const endpoint = 'get-nfts-for-user';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async getVideoStatus(request) {\n    const endpoint = 'get-video-status';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  async getFullTikTokUrl(request) {\n    const endpoint = 'get-full-tik-tok-url';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/tyler/Documents/DeSo/deso-workspace/libs/deso-protocol/src/lib/media/Media.ts"],"names":["axios","Media","constructor","node","identity","uploadImage","request","endpoint","formData","FormData","append","file","UserPublicKeyBase58Check","JWT","post","getUri","uploadVideo","getVideoStatus","getFullTikTokUrl"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAYA,OAAO,MAAMC,KAAN,CAAY;AAGjBC,EAAAA,WAAW,CAACC,IAAD,EAAaC,QAAb,EAAiC;AAAA,SAFpCD,IAEoC;AAAA,SADpCC,QACoC;AAC1C,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;AAEuB,QAAXC,WAAW,CACtBC,OADsB,EAEQ;AAC9B,UAAMC,QAAQ,GAAG,cAAjB;AACA,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBJ,OAAO,CAACK,IAAhC;AACAH,IAAAA,QAAQ,CAACE,MAAT,CACE,0BADF,EAEEJ,OAAO,CAACM,wBAFV;AAIAJ,IAAAA,QAAQ,CAACE,MAAT,CAAgB,KAAhB,EAAuBJ,OAAO,CAACO,GAA/B;AACA,WAAO,MAAMb,KAAK,CAACc,IAAN,CAAY,GAAE,KAAKX,IAAL,CAAUY,MAAV,EAAmB,IAAGR,QAAS,EAA7C,EAAgDD,OAAhD,CAAb;AACD;;AAEuB,QAAXU,WAAW,CACtBV,OADsB,EAEQ;AAC9B,UAAMC,QAAQ,GAAG,mBAAjB;AACA,WAAO,MAAMP,KAAK,CAACc,IAAN,CAAY,GAAE,KAAKX,IAAL,CAAUY,MAAV,EAAmB,IAAGR,QAAS,EAA7C,EAAgDD,OAAhD,CAAb;AACD;;AAE0B,QAAdW,cAAc,CACzBX,OADyB,EAEQ;AACjC,UAAMC,QAAQ,GAAG,kBAAjB;AACA,WAAO,MAAMP,KAAK,CAACc,IAAN,CAAY,GAAE,KAAKX,IAAL,CAAUY,MAAV,EAAmB,IAAGR,QAAS,EAA7C,EAAgDD,OAAhD,CAAb;AACD;;AAE4B,QAAhBY,gBAAgB,CAC3BZ,OAD2B,EAEQ;AACnC,UAAMC,QAAQ,GAAG,sBAAjB;AACA,WAAO,MAAMP,KAAK,CAACc,IAAN,CAAY,GAAE,KAAKX,IAAL,CAAUY,MAAV,EAAmB,IAAGR,QAAS,EAA7C,EAAgDD,OAAhD,CAAb;AACD;;AAzCgB","sourcesContent":["import axios from 'axios';\nimport {\n  GetFullTikTokURLRequest,\n  GetFullTikTokURLResponse,\n  GetVideoStatusRequest,\n  GetVideoStatusResponse,\n  UploadImageRequest,\n  UploadImageResponse,\n} from 'deso-protocol-types';\nimport { Node } from '../node/Node';\nimport { Identity } from '../identity/Identity';\n\nexport class Media {\n  private node: Node;\n  private identity: Identity;\n  constructor(node: Node, identity: Identity) {\n    this.node = node;\n    this.identity = identity;\n  }\n\n  public async uploadImage(\n    request: Partial<UploadImageRequest>\n  ): Promise<UploadImageResponse> {\n    const endpoint = 'upload-image';\n    const formData = new FormData();\n    formData.append('file', request.file as Blob);\n    formData.append(\n      'UserPublicKeyBase58Check',\n      request.UserPublicKeyBase58Check as string\n    );\n    formData.append('JWT', request.JWT as string);\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  public async uploadVideo(\n    request: Partial<UploadImageRequest>\n  ): Promise<UploadImageResponse> {\n    const endpoint = 'get-nfts-for-user';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  public async getVideoStatus(\n    request: Partial<GetVideoStatusRequest>\n  ): Promise<GetVideoStatusResponse> {\n    const endpoint = 'get-video-status';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n\n  public async getFullTikTokUrl(\n    request: Partial<GetFullTikTokURLRequest>\n  ): Promise<GetFullTikTokURLResponse> {\n    const endpoint = 'get-full-tik-tok-url';\n    return await axios.post(`${this.node.getUri()}/${endpoint}`, request);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}