{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tyler\\\\Documents\\\\DeSo\\\\deso-workspace\\\\apps\\\\developer-hub\\\\src\\\\components\\\\profile\\\\SendMessage.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, TextField } from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { SampleAppEncryptedMessage } from '../../recoil/AppState.atoms'; // import { encryptMessage, sendMessage } from \"../../services/DesoApiSendMessage\";\n\nimport { desoService } from '../../chapters/ChapterHelper/Chapter.atom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SendMessage = ({\n  publicKey,\n  myPublicKey,\n  loggedInUser\n}) => {\n  _s();\n\n  const deso = useRecoilValue(desoService);\n  const [encryptedMessage, setEncryptedMessage] = useRecoilState(SampleAppEncryptedMessage);\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    if (encryptedMessage) {\n      deso.social.sendMessage({\n        EncryptedMessageText: encryptedMessage == null ? void 0 : encryptedMessage.payload.encryptedMessage,\n        RecipientPublicKeyBase58Check: publicKey,\n        SenderPublicKeyBase58Check: myPublicKey,\n        MinFeeRateNanosPerKB: 1000,\n        SenderMessagingGroupKeyName: '',\n        RecipientMessagingGroupKeyName: ''\n      });\n    }\n  }, [setEncryptedMessage, encryptedMessage]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      placeholder: \"Send Message\",\n      onChange: event => {\n        setMessage(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: event => {// TODO add\n        //   deso.identity.encrypt(\n        //     {\n        //       RecipientMessagingKeyName: 'default-key',\n        //       SenderPublicKeyBase58Check: myPublicKey,\n        //       RecipientPublicKeyBase58Check: publicKey,\n        //       SenderMessagingKeyName: 'default-key',\n        //     },\n        //     message,\n        //     loggedInUser\n        //   );\n      },\n      children: \"send message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SendMessage, \"CA0aDnvRgLCHN6iMsHR04wiMAYQ=\", false, function () {\n  return [useRecoilValue, useRecoilState];\n});\n\n_c = SendMessage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SendMessage\");","map":{"version":3,"sources":["C:/Users/tyler/Documents/DeSo/deso-workspace/apps/developer-hub/src/components/profile/SendMessage.tsx"],"names":["Button","TextField","useEffect","useState","useRecoilState","useRecoilValue","SampleAppEncryptedMessage","desoService","SendMessage","publicKey","myPublicKey","loggedInUser","deso","encryptedMessage","setEncryptedMessage","message","setMessage","social","sendMessage","EncryptedMessageText","payload","RecipientPublicKeyBase58Check","SenderPublicKeyBase58Check","MinFeeRateNanosPerKB","SenderMessagingGroupKeyName","RecipientMessagingGroupKeyName","event","target","value"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,eAAlC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,QAA/C;AACA,SAASC,yBAAT,QAA0C,6BAA1C,C,CACA;;AAEA,SAASC,WAAT,QAA4B,2CAA5B;;;AAMA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAC1BC,EAAAA,SAD0B;AAE1BC,EAAAA,WAF0B;AAG1BC,EAAAA;AAH0B,CAAD,KAIH;AAAA;;AACtB,QAAMC,IAAI,GAAGP,cAAc,CAACE,WAAD,CAA3B;AACA,QAAM,CAACM,gBAAD,EAAmBC,mBAAnB,IAA0CV,cAAc,CAC5DE,yBAD4D,CAA9D;AAGA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAS,EAAT,CAAtC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,gBAAJ,EAAsB;AACpBD,MAAAA,IAAI,CAACK,MAAL,CAAYC,WAAZ,CAAwB;AACtBC,QAAAA,oBAAoB,EAAEN,gBAAF,oBAAEA,gBAAgB,CAAEO,OAAlB,CACnBP,gBAFmB;AAGtBQ,QAAAA,6BAA6B,EAAEZ,SAHT;AAItBa,QAAAA,0BAA0B,EAAEZ,WAJN;AAKtBa,QAAAA,oBAAoB,EAAE,IALA;AAMtBC,QAAAA,2BAA2B,EAAE,EANP;AAOtBC,QAAAA,8BAA8B,EAAE;AAPV,OAAxB;AASD;AACF,GAZQ,EAYN,CAACX,mBAAD,EAAsBD,gBAAtB,CAZM,CAAT;AAaA,sBACE;AAAA,4BACE,QAAC,SAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,WAAW,EAAC,cAFd;AAGE,MAAA,QAAQ,EAAGa,KAAD,IAAW;AACnBV,QAAAA,UAAU,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAV;AACD;AALH;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,MAAD;AACE,MAAA,OAAO,EAAGF,KAAD,IAAW,CAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,OAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA,kBADF;AA4BD,CAnDM;;GAAMlB,W;UAKEH,c,EACmCD,c;;;KANrCI,W","sourcesContent":["import { Button, TextField } from '@mui/material';\r\nimport { useEffect, useState } from 'react';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport { SampleAppEncryptedMessage } from '../../recoil/AppState.atoms';\r\n// import { encryptMessage, sendMessage } from \"../../services/DesoApiSendMessage\";\r\nimport { LoginUser } from 'deso-protocol-types';\r\nimport { desoService } from '../../chapters/ChapterHelper/Chapter.atom';\r\nexport interface SendMessageProps {\r\n  publicKey: string;\r\n  myPublicKey: string;\r\n  loggedInUser: LoginUser;\r\n}\r\nexport const SendMessage = ({\r\n  publicKey,\r\n  myPublicKey,\r\n  loggedInUser,\r\n}: SendMessageProps) => {\r\n  const deso = useRecoilValue(desoService);\r\n  const [encryptedMessage, setEncryptedMessage] = useRecoilState(\r\n    SampleAppEncryptedMessage\r\n  );\r\n  const [message, setMessage] = useState<string>('');\r\n  useEffect(() => {\r\n    if (encryptedMessage) {\r\n      deso.social.sendMessage({\r\n        EncryptedMessageText: encryptedMessage?.payload\r\n          .encryptedMessage as string,\r\n        RecipientPublicKeyBase58Check: publicKey,\r\n        SenderPublicKeyBase58Check: myPublicKey,\r\n        MinFeeRateNanosPerKB: 1000,\r\n        SenderMessagingGroupKeyName: '',\r\n        RecipientMessagingGroupKeyName: '',\r\n      });\r\n    }\r\n  }, [setEncryptedMessage, encryptedMessage]);\r\n  return (\r\n    <>\r\n      <TextField\r\n        fullWidth\r\n        placeholder=\"Send Message\"\r\n        onChange={(event) => {\r\n          setMessage(event.target.value);\r\n        }}\r\n      />\r\n      <Button\r\n        onClick={(event) => {\r\n          // TODO add\r\n          //   deso.identity.encrypt(\r\n          //     {\r\n          //       RecipientMessagingKeyName: 'default-key',\r\n          //       SenderPublicKeyBase58Check: myPublicKey,\r\n          //       RecipientPublicKeyBase58Check: publicKey,\r\n          //       SenderMessagingKeyName: 'default-key',\r\n          //     },\r\n          //     message,\r\n          //     loggedInUser\r\n          //   );\r\n        }}\r\n      >\r\n        send message\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}