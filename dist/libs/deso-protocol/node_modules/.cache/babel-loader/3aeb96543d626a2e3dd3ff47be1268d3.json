{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tyler\\\\Documents\\\\DeSo\\\\deso-workspace\\\\apps\\\\developer-hub\\\\src\\\\components\\\\profile\\\\DisplayPosts.tsx\",\n    _s = $RefreshSig$();\n\nimport { Avatar, CardHeader } from '@mui/material';\nimport Card from '@mui/material/Card';\nimport { useEffect, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { desoService } from '../../chapters/ChapterHelper/Chapter.atom';\nimport { SampleAppMyUserInfo } from '../../recoil/AppState.atoms';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DisplayPosts = ({\n  publicKey\n}) => {\n  _s();\n\n  const deso = useRecoilValue(desoService);\n  const [posts, setPosts] = useState([]);\n  const user = useRecoilValue(SampleAppMyUserInfo);\n  useEffect(() => {\n    getPosts();\n  }, [user]);\n\n  const getPosts = async () => {\n    var _user$profileInfoResp, _user$profileInfoResp2;\n\n    if (user != null && (_user$profileInfoResp = user.profileInfoResponse) != null && (_user$profileInfoResp2 = _user$profileInfoResp.Profile) != null && _user$profileInfoResp2.Username) {\n      var _user$profileInfoResp3;\n\n      const posts = await deso.posts.getPostsForPublicKey(publicKey, user == null ? void 0 : (_user$profileInfoResp3 = user.profileInfoResponse) == null ? void 0 : _user$profileInfoResp3.Profile.Username); // TODO fix\n      // setPosts(generatePosts(posts));\n    }\n  };\n\n  const generatePosts = postInfo => {\n    if (user) {\n      let postElements = [];\n\n      if (postInfo.Posts) {\n        postElements = postInfo.Posts.map((post, index) => {\n          var _user$profileInfoResp4, _user$profileInfoResp5, _user$profileInfoResp6;\n\n          const profilePictureSrc = deso.user.getSingleProfilePicture(post.PosterPublicKeyBase58Check);\n          return /*#__PURE__*/_jsxDEV(Card, {\n            className: \"mb-5 pb-2\",\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n                src: profilePictureSrc\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 25\n              }, this),\n              title: `@${(_user$profileInfoResp4 = user == null ? void 0 : (_user$profileInfoResp5 = user.profileInfoResponse) == null ? void 0 : (_user$profileInfoResp6 = _user$profileInfoResp5.Profile) == null ? void 0 : _user$profileInfoResp6.Username) != null ? _user$profileInfoResp4 : ''}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pl-4\",\n              children: post.Body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this);\n        });\n      }\n\n      if (postElements.length > 0) {\n        return postElements;\n      }\n\n      return [];\n    } else {\n      return [];\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col\",\n    children: posts\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, this);\n};\n\n_s(DisplayPosts, \"XZoJzUnwGtLW7JfrEm3AxMV/2rY=\", false, function () {\n  return [useRecoilValue, useRecoilValue];\n});\n\n_c = DisplayPosts;\nexport default DisplayPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayPosts\");","map":{"version":3,"sources":["C:/Users/tyler/Documents/DeSo/deso-workspace/apps/developer-hub/src/components/profile/DisplayPosts.tsx"],"names":["Avatar","CardHeader","Card","useEffect","useState","useRecoilValue","desoService","SampleAppMyUserInfo","DisplayPosts","publicKey","deso","posts","setPosts","user","getPosts","profileInfoResponse","Profile","Username","getPostsForPublicKey","generatePosts","postInfo","postElements","Posts","map","post","index","profilePictureSrc","getSingleProfilePicture","PosterPublicKeyBase58Check","Body","length"],"mappings":";;;AACA,SAASA,MAAT,EAAiBC,UAAjB,QAAmC,eAAnC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAAuBC,SAAvB,EAAkCC,QAAlC,QAAkD,OAAlD;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,WAAT,QAA4B,2CAA5B;AACA,SACEC,mBADF,QAGO,6BAHP;;;AAOA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoC;AAAA;;AACvD,QAAMC,IAAI,GAAGL,cAAc,CAACC,WAAD,CAA3B;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAiB,EAAjB,CAAlC;AACA,QAAMS,IAAI,GAAGR,cAAc,CAAwBE,mBAAxB,CAA3B;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,QAAQ;AACT,GAFQ,EAEN,CAACD,IAAD,CAFM,CAAT;;AAIA,QAAMC,QAAQ,GAAG,YAA2B;AAAA;;AAC1C,QAAID,IAAJ,qCAAIA,IAAI,CAAEE,mBAAV,uCAAI,sBAA2BC,OAA/B,aAAI,uBAAoCC,QAAxC,EAAkD;AAAA;;AAChD,YAAMN,KAAmC,GACvC,MAAMD,IAAI,CAACC,KAAL,CAAWO,oBAAX,CACJT,SADI,EAEJI,IAFI,8CAEJA,IAAI,CAAEE,mBAFF,qBAEJ,uBAA2BC,OAA3B,CAAmCC,QAF/B,CADR,CADgD,CAMhD;AACA;AACD;AACF,GAVD;;AAYA,QAAME,aAAa,GAAIC,QAAD,IAAmC;AACvD,QAAIP,IAAJ,EAAU;AACR,UAAIQ,YAA4B,GAAG,EAAnC;;AACA,UAAID,QAAQ,CAACE,KAAb,EAAoB;AAClBD,QAAAA,YAAY,GAAGD,QAAQ,CAACE,KAAT,CAAeC,GAAf,CAAmB,CAACC,IAAD,EAAYC,KAAZ,KAA8B;AAAA;;AAC9D,gBAAMC,iBAAiB,GAAGhB,IAAI,CAACG,IAAL,CAAUc,uBAAV,CACxBH,IAAI,CAACI,0BADmB,CAA1B;AAGA,8BACE,QAAC,IAAD;AAAkB,YAAA,SAAS,EAAC,WAA5B;AAAA,oCACE,QAAC,UAAD;AACE,cAAA,MAAM,eAAE,QAAC,MAAD;AAAQ,gBAAA,GAAG,EAAEF;AAAb;AAAA;AAAA;AAAA;AAAA,sBADV;AAEE,cAAA,KAAK,EAAG,IAAD,0BAAIb,IAAJ,8CAAIA,IAAI,CAAEE,mBAAV,+CAAI,uBAA2BC,OAA/B,qBAAI,uBAAoCC,QAAxC,qCAAoD,EAAG;AAFhE;AAAA;AAAA;AAAA;AAAA,oBADF,eAKE;AAAK,cAAA,SAAS,EAAC,MAAf;AAAA,wBAAuBO,IAAI,CAACK;AAA5B;AAAA;AAAA;AAAA;AAAA,oBALF;AAAA,aAAWJ,KAAX;AAAA;AAAA;AAAA;AAAA,kBADF;AASD,SAbc,CAAf;AAcD;;AACD,UAAIJ,YAAY,CAACS,MAAb,GAAsB,CAA1B,EAA6B;AAC3B,eAAOT,YAAP;AACD;;AACD,aAAO,EAAP;AACD,KAtBD,MAsBO;AACL,aAAO,EAAP;AACD;AACF,GA1BD;;AA2BA,sBAAO;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,cAAgCV;AAAhC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAhDD;;GAAMH,Y;UACSH,c,EAEAA,c;;;KAHTG,Y;AAkDN,eAAeA,YAAf","sourcesContent":["import { GetPostsForPublicKeyResponse } from 'deso-protocol-types';\r\nimport { Avatar, CardHeader } from '@mui/material';\r\nimport Card from '@mui/material/Card';\r\nimport { ReactElement, useEffect, useState } from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { desoService } from '../../chapters/ChapterHelper/Chapter.atom';\r\nimport {\r\n  SampleAppMyUserInfo,\r\n  MyUserInfoType,\r\n} from '../../recoil/AppState.atoms';\r\nexport interface CreatePostProps {\r\n  publicKey: string;\r\n}\r\nconst DisplayPosts = ({ publicKey }: CreatePostProps) => {\r\n  const deso = useRecoilValue(desoService);\r\n  const [posts, setPosts] = useState<ReactElement[]>([]);\r\n  const user = useRecoilValue<MyUserInfoType | null>(SampleAppMyUserInfo);\r\n  useEffect(() => {\r\n    getPosts();\r\n  }, [user]);\r\n\r\n  const getPosts = async (): Promise<void> => {\r\n    if (user?.profileInfoResponse?.Profile?.Username) {\r\n      const posts: GetPostsForPublicKeyResponse =\r\n        await deso.posts.getPostsForPublicKey(\r\n          publicKey,\r\n          user?.profileInfoResponse?.Profile.Username\r\n        );\r\n      // TODO fix\r\n      // setPosts(generatePosts(posts));\r\n    }\r\n  };\r\n\r\n  const generatePosts = (postInfo: any): ReactElement[] => {\r\n    if (user) {\r\n      let postElements: ReactElement[] = [];\r\n      if (postInfo.Posts) {\r\n        postElements = postInfo.Posts.map((post: any, index: number) => {\r\n          const profilePictureSrc = deso.user.getSingleProfilePicture(\r\n            post.PosterPublicKeyBase58Check\r\n          );\r\n          return (\r\n            <Card key={index} className=\"mb-5 pb-2\">\r\n              <CardHeader\r\n                avatar={<Avatar src={profilePictureSrc}></Avatar>}\r\n                title={`@${user?.profileInfoResponse?.Profile?.Username ?? ''}`}\r\n              ></CardHeader>\r\n              <div className=\"pl-4\">{post.Body}</div>\r\n            </Card>\r\n          );\r\n        });\r\n      }\r\n      if (postElements.length > 0) {\r\n        return postElements;\r\n      }\r\n      return [];\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n  return <div className=\"flex flex-col\">{posts}</div>;\r\n};\r\n\r\nexport default DisplayPosts;\r\n"]},"metadata":{},"sourceType":"module"}