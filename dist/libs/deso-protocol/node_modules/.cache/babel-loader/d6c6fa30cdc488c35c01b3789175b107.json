{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nexport const uuid = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = Math.random() * 16 | 0,\n          v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}; // export const getJwtInfo = (user: LoginUser): IdentityJwtRequest => {\n//   const { accessLevelHmac, encryptedSeedHex, accessLevel } = user;\n//   return {\n//     id: uuid(),\n//     service: 'identity',\n//     method: 'jwt',\n//     payload: {\n//       accessLevelHmac,\n//       encryptedSeedHex,\n//       accessLevel,\n//     },\n//   };\n// };\n\nexport const throwErrors = (requiredAttributes, request) => {\n  requiredAttributes.forEach(attrName => {\n    const doesExist = request[attrName];\n\n    if (!doesExist) {\n      throw Error(`${attrName} is required`);\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/tyler/Documents/DeSo/deso-workspace/libs/deso-protocol/src/utils/utils.ts"],"names":["uuid","replace","c","r","Math","random","v","toString","throwErrors","requiredAttributes","request","forEach","attrName","doesExist","Error"],"mappings":";;;AAAA,OAAO,MAAMA,IAAI,GAAG,MAAM;AACxB,SAAO,uCAAuCC,OAAvC,CAA+C,OAA/C,EAAwD,UAAUC,CAAV,EAAa;AAC1E,UAAMC,CAAC,GAAIC,IAAI,CAACC,MAAL,KAAgB,EAAjB,GAAuB,CAAjC;AAAA,UACEC,CAAC,GAAGJ,CAAC,KAAK,GAAN,GAAYC,CAAZ,GAAiBA,CAAC,GAAG,GAAL,GAAY,GADlC;AAEA,WAAOG,CAAC,CAACC,QAAF,CAAW,EAAX,CAAP;AACD,GAJM,CAAP;AAKD,CANM,C,CAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAG,CACzBC,kBADyB,EAEzBC,OAFyB,KAGhB;AACTD,EAAAA,kBAAkB,CAACE,OAAnB,CAA4BC,QAAD,IAAsB;AAC/C,UAAMC,SAAS,GAAIH,OAAD,CAAiBE,QAAjB,CAAlB;;AACA,QAAI,CAACC,SAAL,EAAgB;AACd,YAAMC,KAAK,CAAE,GAAEF,QAAS,cAAb,CAAX;AACD;AACF,GALD;AAMD,CAVM","sourcesContent":["export const uuid = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n\n// export const getJwtInfo = (user: LoginUser): IdentityJwtRequest => {\n//   const { accessLevelHmac, encryptedSeedHex, accessLevel } = user;\n//   return {\n//     id: uuid(),\n//     service: 'identity',\n//     method: 'jwt',\n//     payload: {\n//       accessLevelHmac,\n//       encryptedSeedHex,\n//       accessLevel,\n//     },\n//   };\n// };\nexport const throwErrors = (\n  requiredAttributes: string[],\n  request: Partial<any>\n): void => {\n  requiredAttributes.forEach((attrName: string) => {\n    const doesExist = (request as any)[attrName];\n    if (!doesExist) {\n      throw Error(`${attrName} is required`);\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}