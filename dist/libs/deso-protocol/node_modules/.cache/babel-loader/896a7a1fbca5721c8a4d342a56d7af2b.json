{"ast":null,"code":"import \"core-js/modules/es.promise.js\";\nimport { requestLogin, requestLogout } from './WindowPrompts';\nimport { approveSignAndSubmit, callIdentityMethodAndExecute, getIframe } from './IdentityHelper';\nimport { iFrameHandler } from './WindowHandler';\nexport class Identity {\n  constructor(node) {\n    this.node = void 0;\n    this.node = node;\n  }\n\n  getIframe() {\n    return getIframe();\n  }\n\n  getUser() {\n    const user = localStorage.getItem('login_user');\n\n    if (user) {\n      return JSON.parse(user);\n    }\n\n    return null;\n  }\n\n  getUserKey() {\n    const key = localStorage.getItem('login_key');\n\n    if (key) {\n      return key;\n    }\n\n    return null;\n  }\n\n  async initialize() {\n    if (this.getIframe()) {\n      return;\n    }\n\n    return new Promise(resolve => {\n      const windowHandler = event => {\n        if (event.origin !== 'https://identity.deso.org') {\n          return;\n        }\n\n        if (event.data.method === 'initialize') {\n          event.source.postMessage({\n            id: event.data.id,\n            service: 'identity',\n            payload: {}\n          }, 'https://identity.deso.org');\n          resolve(event.data);\n        }\n      };\n\n      window.addEventListener('message', windowHandler);\n      this.setIdentityFrame(true);\n    });\n  }\n\n  async login(accessLevel = '4') {\n    const prompt = requestLogin(accessLevel);\n    const {\n      key,\n      user\n    } = await iFrameHandler({\n      iFrameMethod: 'login',\n      data: {\n        prompt\n      }\n    });\n    localStorage.setItem('login_user', user);\n    localStorage.setItem('login_key', key);\n    return {\n      user: JSON.parse(user),\n      key\n    };\n  }\n\n  async logout(publicKey) {\n    const prompt = requestLogout(publicKey);\n    const successful = await iFrameHandler({\n      iFrameMethod: 'logout',\n      data: {\n        prompt\n      }\n    });\n    return successful;\n  }\n\n  setIdentityFrame(createNewIdentityFrame = false) {\n    let frame = document.getElementById('identity');\n\n    if (frame && createNewIdentityFrame) {\n      frame.remove();\n    }\n\n    if (!createNewIdentityFrame) {\n      return;\n    }\n\n    frame = document.createElement('iframe');\n    frame.setAttribute('src', 'https://identity.deso.org/embed?v=2');\n    frame.setAttribute('id', 'identity');\n    frame.style.width = '100vh';\n    frame.style.height = '100vh';\n    frame.style.position = 'fixed';\n    frame.style.zIndex = '1000';\n    frame.style.display = 'none';\n    frame.style.left = '0';\n    frame.style.right = '0';\n    const root = document.getElementsByTagName('body')[0];\n\n    if (root) {\n      root.appendChild(frame);\n    }\n  }\n\n  async submitTransaction(TransactionHex) {\n    const user = this.getUser(); // user exists no need to approve\n\n    if (user) {\n      return callIdentityMethodAndExecute(TransactionHex, 'sign');\n    } else {\n      // user does not exist  get approval\n      return approveSignAndSubmit(TransactionHex);\n    }\n  }\n\n  async decrypt(encryptedMessages) {\n    let user = this.getUser();\n\n    if (!user) {\n      await this.login();\n      user = this.getUser();\n    }\n\n    return await callIdentityMethodAndExecute(encryptedMessages, 'decrypt');\n  }\n\n  async encrypt(request) {\n    request.RecipientPublicKeyBase58Check;\n    let user = this.getUser();\n\n    if (!user) {\n      await this.login();\n      user = this.getUser();\n    }\n\n    return await callIdentityMethodAndExecute(request, 'encrypt');\n  }\n\n  async getJwt() {\n    let user = this.getUser();\n\n    if (!user) {\n      user = (await this.login()).user;\n    }\n\n    return await callIdentityMethodAndExecute(undefined, 'jwt');\n  }\n\n}","map":{"version":3,"sources":["C:/Users/tyler/Documents/DeSo/deso-workspace/libs/deso-protocol/src/lib/identity/Identity.ts"],"names":["requestLogin","requestLogout","approveSignAndSubmit","callIdentityMethodAndExecute","getIframe","iFrameHandler","Identity","constructor","node","getUser","user","localStorage","getItem","JSON","parse","getUserKey","key","initialize","Promise","resolve","windowHandler","event","origin","data","method","source","postMessage","id","service","payload","window","addEventListener","setIdentityFrame","login","accessLevel","prompt","iFrameMethod","setItem","logout","publicKey","successful","createNewIdentityFrame","frame","document","getElementById","remove","createElement","setAttribute","style","width","height","position","zIndex","display","left","right","root","getElementsByTagName","appendChild","submitTransaction","TransactionHex","decrypt","encryptedMessages","encrypt","request","RecipientPublicKeyBase58Check","getJwt","undefined"],"mappings":"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","sourcesContent":["import { Node } from '../Node/Node';\nimport { requestLogin, requestLogout } from './WindowPrompts';\nimport {\n  GetDecryptMessagesRequest,\n  GetDecryptMessagesResponse,\n  LoginUser,\n  SendMessageStatelessRequest,\n} from 'deso-protocol-types';\nimport {\n  approveSignAndSubmit,\n  callIdentityMethodAndExecute,\n  getIframe,\n} from './IdentityHelper';\nimport { iFrameHandler } from './WindowHandler';\n\nexport class Identity {\n  node: Node;\n  constructor(node: Node) {\n    this.node = node;\n  }\n\n  public getIframe(): HTMLIFrameElement {\n    return getIframe();\n  }\n\n  public getUser(): LoginUser | null {\n    const user = localStorage.getItem('login_user');\n    if (user) {\n      return JSON.parse(user);\n    }\n    return null;\n  }\n\n  public getUserKey(): string | null {\n    const key = localStorage.getItem('login_key');\n    if (key) {\n      return key;\n    }\n    return null;\n  }\n\n  public async initialize(): Promise<any> {\n    if (this.getIframe()) {\n      return;\n    }\n    return new Promise((resolve) => {\n      const windowHandler = (event: any) => {\n        if (event.origin !== 'https://identity.deso.org') {\n          return;\n        }\n        if (event.data.method === 'initialize') {\n          event.source.postMessage(\n            {\n              id: event.data.id,\n              service: 'identity',\n              payload: {},\n            },\n            'https://identity.deso.org' as WindowPostMessageOptions\n          );\n          resolve(event.data);\n        }\n      };\n      window.addEventListener('message', windowHandler);\n      this.setIdentityFrame(true);\n    });\n  }\n\n  public async login(\n    accessLevel = '4'\n  ): Promise<{ user: LoginUser; key: string }> {\n    const prompt = requestLogin(accessLevel);\n    const { key, user } = await iFrameHandler({\n      iFrameMethod: 'login',\n      data: { prompt },\n    });\n    localStorage.setItem('login_user', user);\n    localStorage.setItem('login_key', key);\n    return { user: JSON.parse(user), key };\n  }\n\n  public async logout(publicKey: string): Promise<boolean> {\n    const prompt = requestLogout(publicKey);\n    const successful = await iFrameHandler({\n      iFrameMethod: 'logout',\n      data: { prompt },\n    });\n    return successful;\n  }\n\n  private setIdentityFrame(createNewIdentityFrame = false): void {\n    let frame = document.getElementById('identity');\n    if (frame && createNewIdentityFrame) {\n      frame.remove();\n    }\n    if (!createNewIdentityFrame) {\n      return;\n    }\n    frame = document.createElement('iframe');\n    frame.setAttribute('src', 'https://identity.deso.org/embed?v=2');\n    frame.setAttribute('id', 'identity');\n    frame.style.width = '100vh';\n    frame.style.height = '100vh';\n    frame.style.position = 'fixed';\n    frame.style.zIndex = '1000';\n    frame.style.display = 'none';\n    frame.style.left = '0';\n    frame.style.right = '0';\n    const root = document.getElementsByTagName('body')[0];\n    if (root) {\n      root.appendChild(frame);\n    }\n  }\n\n  public async submitTransaction(TransactionHex: string) {\n    const user = this.getUser();\n    // user exists no need to approve\n    if (user) {\n      return callIdentityMethodAndExecute(TransactionHex, 'sign');\n    } else {\n      // user does not exist  get approval\n      return approveSignAndSubmit(TransactionHex);\n    }\n  }\n\n  public async decrypt(\n    encryptedMessages: GetDecryptMessagesRequest[]\n  ): Promise<GetDecryptMessagesResponse[]> {\n    let user = this.getUser();\n    if (!user) {\n      await this.login();\n      user = this.getUser();\n    }\n    return await callIdentityMethodAndExecute(encryptedMessages, 'decrypt');\n  }\n\n  public async encrypt(\n    request: Partial<SendMessageStatelessRequest>\n  ): Promise<string> {\n    request.RecipientPublicKeyBase58Check;\n    let user = this.getUser();\n    if (!user) {\n      await this.login();\n      user = this.getUser();\n    }\n    return await callIdentityMethodAndExecute(request, 'encrypt');\n  }\n\n  public async getJwt(): Promise<string> {\n    let user = this.getUser();\n    if (!user) {\n      user = (await this.login()).user;\n    }\n    return await callIdentityMethodAndExecute(undefined, 'jwt');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}