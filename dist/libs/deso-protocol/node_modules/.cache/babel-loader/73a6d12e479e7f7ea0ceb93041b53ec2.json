{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tyler\\\\Documents\\\\DeSo\\\\deso-workspace\\\\apps\\\\developer-hub\\\\src\\\\components\\\\profile\\\\DisplayMessages.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button } from '@mui/material';\nimport Avatar from '@mui/material/Avatar';\nimport { useEffect, useState } from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { SampleAppDecryptedHexes, SampleAppLoggedInUser, SampleAppMyProfilePicture } from '../../recoil/AppState.atoms';\nimport { desoService, PublicKey } from '../../chapters/ChapterHelper/Chapter.atom';\nimport { SendMessage } from './SendMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DisplayMessages = ({\n  publicKey\n}) => {\n  _s();\n\n  const deso = useRecoilValue(desoService);\n  const myPublicKey = useRecoilValue(PublicKey);\n  const [showMessages, setShowMessages] = useState(false);\n  const [threadCard, setThreadCard] = useState(null);\n  const loggedInUser = useRecoilValue(SampleAppLoggedInUser);\n  const profilePicture = useRecoilValue(SampleAppMyProfilePicture);\n  const [followerPicture, setFollowerPicture] = useState(null);\n  const [decryptedMessages, setDecryptedMessages] = useRecoilState(SampleAppDecryptedHexes);\n  useEffect(() => {\n    const followerProfilePic = deso.user.getSingleProfilePicture(publicKey);\n    setFollowerPicture(followerProfilePic);\n  }, []);\n\n  const generateThread = thread => {\n    if (thread) {\n      return thread.map((x, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex justify-start ${x.m.IsSender ? 'bg-[#484753]' : 'bg-[#88869b]'} py-2 px-2 rounded-lg mx-6 mb-3`,\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {\n            src: x.m.IsSender ? profilePicture : followerPicture\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"my-auto px-2 text-[#fff] w-full text-left\",\n            children: x.decryptedMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this);\n      });\n    } else {\n      return [];\n    }\n  };\n\n  const getUserMessages = async () => {\n    if (loggedInUser === null) {\n      return;\n    }\n\n    const response = await deso.social.getMessagesStateless({\n      NumToFetch: 25,\n      PublicKeyBase58Check: myPublicKey,\n      FetchAfterPublicKeyBase58Check: '',\n      HoldersOnly: false,\n      FollowersOnly: false,\n      FollowingOnly: false,\n      HoldingsOnly: false,\n      SortAlgorithm: 'time'\n    });\n    setThreadCard(generateThread(response));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"display flex justify-start mt-2 py-2\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          if (showMessages === false) {\n            getUserMessages();\n          }\n\n          setShowMessages(!showMessages);\n        },\n        children: showMessages ? 'hide messages' : 'show messages'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), showMessages ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-[#4f4b6e] mx-6 mt-3 py-3 rounded-t-lg  max-h-[400px] overflow-auto\",\n        children: threadCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-7 \",\n        children: /*#__PURE__*/_jsxDEV(SendMessage, {\n          publicKey: publicKey,\n          myPublicKey: myPublicKey,\n          loggedInUser: loggedInUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true);\n};\n\n_s(DisplayMessages, \"xV1y8MgaOwxthIyWbW75acdKiHY=\", false, function () {\n  return [useRecoilValue, useRecoilValue, useRecoilValue, useRecoilValue, useRecoilState];\n});\n\n_c = DisplayMessages;\nexport default DisplayMessages;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayMessages\");","map":{"version":3,"sources":["C:/Users/tyler/Documents/DeSo/deso-workspace/apps/developer-hub/src/components/profile/DisplayMessages.tsx"],"names":["Button","Avatar","useEffect","useState","useRecoilState","useRecoilValue","SampleAppDecryptedHexes","SampleAppLoggedInUser","SampleAppMyProfilePicture","desoService","PublicKey","SendMessage","DisplayMessages","publicKey","deso","myPublicKey","showMessages","setShowMessages","threadCard","setThreadCard","loggedInUser","profilePicture","followerPicture","setFollowerPicture","decryptedMessages","setDecryptedMessages","followerProfilePic","user","getSingleProfilePicture","generateThread","thread","map","x","index","m","IsSender","decryptedMessage","getUserMessages","response","social","getMessagesStateless","NumToFetch","PublicKeyBase58Check","FetchAfterPublicKeyBase58Check","HoldersOnly","FollowersOnly","FollowingOnly","HoldingsOnly","SortAlgorithm"],"mappings":"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","sourcesContent":["import { Button } from '@mui/material';\r\n\r\nimport Avatar from '@mui/material/Avatar';\r\nimport { ReactElement, useEffect, useState } from 'react';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport {\r\n  SampleAppDecryptedHexes,\r\n  SampleAppLoggedInUser,\r\n  SampleAppMyProfilePicture,\r\n} from '../../recoil/AppState.atoms';\r\nimport {\r\n  desoService,\r\n  PublicKey,\r\n} from '../../chapters/ChapterHelper/Chapter.atom';\r\nimport { SendMessage } from './SendMessage';\r\nimport { LoginUser } from 'deso-protocol-types';\r\n\r\nexport interface DisplayMessagesProps {\r\n  publicKey: string;\r\n}\r\n\r\nconst DisplayMessages = ({ publicKey }: DisplayMessagesProps) => {\r\n  const deso = useRecoilValue(desoService);\r\n  const myPublicKey = useRecoilValue(PublicKey);\r\n  const [showMessages, setShowMessages] = useState<boolean>(false);\r\n  const [threadCard, setThreadCard] = useState<ReactElement[] | null>(null);\r\n  const loggedInUser = useRecoilValue(SampleAppLoggedInUser);\r\n  const profilePicture = useRecoilValue<string | null>(\r\n    SampleAppMyProfilePicture\r\n  );\r\n  const [followerPicture, setFollowerPicture] = useState<any>(null);\r\n  const [decryptedMessages, setDecryptedMessages] = useRecoilState(\r\n    SampleAppDecryptedHexes\r\n  );\r\n\r\n  useEffect(() => {\r\n    const followerProfilePic = deso.user.getSingleProfilePicture(publicKey);\r\n    setFollowerPicture(followerProfilePic);\r\n  }, []);\r\n\r\n  const generateThread = (thread: any[]) => {\r\n    if (thread) {\r\n      return thread.map((x, index) => {\r\n        return (\r\n          <div\r\n            key={index}\r\n            className={`flex justify-start ${\r\n              x.m.IsSender ? 'bg-[#484753]' : 'bg-[#88869b]'\r\n            } py-2 px-2 rounded-lg mx-6 mb-3`}\r\n          >\r\n            <Avatar\r\n              src={x.m.IsSender ? profilePicture : followerPicture}\r\n            ></Avatar>\r\n            <div className=\"my-auto px-2 text-[#fff] w-full text-left\">\r\n              {x.decryptedMessage}\r\n            </div>\r\n          </div>\r\n        );\r\n      });\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const getUserMessages = async () => {\r\n    if (loggedInUser === null) {\r\n      return;\r\n    }\r\n    const response = await deso.social.getMessagesStateless({\r\n      NumToFetch: 25,\r\n      PublicKeyBase58Check: myPublicKey as string,\r\n      FetchAfterPublicKeyBase58Check: '',\r\n      HoldersOnly: false,\r\n      FollowersOnly: false,\r\n      FollowingOnly: false,\r\n      HoldingsOnly: false,\r\n      SortAlgorithm: 'time',\r\n    });\r\n    setThreadCard(generateThread(response));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"display flex justify-start mt-2 py-2\">\r\n        <Button\r\n          onClick={() => {\r\n            if (showMessages === false) {\r\n              getUserMessages();\r\n            }\r\n            setShowMessages(!showMessages);\r\n          }}\r\n        >\r\n          {showMessages ? 'hide messages' : 'show messages'}\r\n        </Button>\r\n      </div>\r\n\r\n      {showMessages ? (\r\n        <>\r\n          <div className=\"bg-[#4f4b6e] mx-6 mt-3 py-3 rounded-t-lg  max-h-[400px] overflow-auto\">\r\n            {threadCard}\r\n          </div>\r\n          <div className=\"px-7 \">\r\n            <SendMessage\r\n              publicKey={publicKey}\r\n              myPublicKey={myPublicKey as string}\r\n              loggedInUser={loggedInUser as LoginUser}\r\n            />\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default DisplayMessages;\r\n"]},"metadata":{},"sourceType":"module"}